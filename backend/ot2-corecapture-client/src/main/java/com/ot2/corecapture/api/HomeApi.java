/*
 * Core Capture Services
 * OpenText Core Capture Services are a set of RESTful web service interfaces that provides capture functionality. Being developed in a purely RESTful style, Core Capture Services are easier to consume for the purposes of writing custom clients.  Core Capture Services identifies resources by Uniform Resource Identifiers (URIs). It defines specific media types to represent resources and drives application state transfers by using link relations. It uses a limited number of HTTP standard methods (GET, POST, and DELETE) to manipulate these resources over the HTTP protocol.  Core Capture Services (hereafter simply called, \"service\") supports only the JSON format for resource representation. JavaScript Object Notation (JSON) is a lightweight data interchange format based on a subset of the JavaScript Programming Language standard.
 *
 * The version of the OpenAPI document: 23.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ot2.corecapture.api;

import com.ot2.corecapture.invoker.ApiCallback;
import com.ot2.corecapture.invoker.ApiClient;
import com.ot2.corecapture.invoker.ApiException;
import com.ot2.corecapture.invoker.ApiResponse;
import com.ot2.corecapture.invoker.Configuration;
import com.ot2.corecapture.invoker.Pair;
import com.ot2.corecapture.invoker.ProgressRequestBody;
import com.ot2.corecapture.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ot2.corecapture.model.AboutGet200Response;
import com.ot2.corecapture.model.Get200Response;
import com.ot2.corecapture.model.Get415Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class HomeApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public HomeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public HomeApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for aboutGet
     * @param suppressResponseCodes This can be left without an assignment or you can use itself, suppress_response_codes&#x3D;suppress_response_codes (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aboutGetCall(String suppressResponseCodes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/about";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (suppressResponseCodes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("suppress_response_codes", suppressResponseCodes));
        }

        final String[] localVarAccepts = {
            "application/hal+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "na-1-dev.api.opentext.com" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aboutGetValidateBeforeCall(String suppressResponseCodes, final ApiCallback _callback) throws ApiException {
        return aboutGetCall(suppressResponseCodes, _callback);

    }

    /**
     * Provides product version information.
     * This resource provides product information about the Services installation to authenticated users.
     * @param suppressResponseCodes This can be left without an assignment or you can use itself, suppress_response_codes&#x3D;suppress_response_codes (optional)
     * @return AboutGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public AboutGet200Response aboutGet(String suppressResponseCodes) throws ApiException {
        ApiResponse<AboutGet200Response> localVarResp = aboutGetWithHttpInfo(suppressResponseCodes);
        return localVarResp.getData();
    }

    /**
     * Provides product version information.
     * This resource provides product information about the Services installation to authenticated users.
     * @param suppressResponseCodes This can be left without an assignment or you can use itself, suppress_response_codes&#x3D;suppress_response_codes (optional)
     * @return ApiResponse&lt;AboutGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AboutGet200Response> aboutGetWithHttpInfo(String suppressResponseCodes) throws ApiException {
        okhttp3.Call localVarCall = aboutGetValidateBeforeCall(suppressResponseCodes, null);
        Type localVarReturnType = new TypeToken<AboutGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Provides product version information. (asynchronously)
     * This resource provides product information about the Services installation to authenticated users.
     * @param suppressResponseCodes This can be left without an assignment or you can use itself, suppress_response_codes&#x3D;suppress_response_codes (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aboutGetAsync(String suppressResponseCodes, final ApiCallback<AboutGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = aboutGetValidateBeforeCall(suppressResponseCodes, _callback);
        Type localVarReturnType = new TypeToken<AboutGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rootGet
     * @param suppressResponseCodes This can be left without an assignment or you can use itself, suppress_response_codes&#x3D;suppress_response_codes (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rootGetCall(String suppressResponseCodes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (suppressResponseCodes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("suppress_response_codes", suppressResponseCodes));
        }

        final String[] localVarAccepts = {
            "application/hal+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rootGetValidateBeforeCall(String suppressResponseCodes, final ApiCallback _callback) throws ApiException {
        return rootGetCall(suppressResponseCodes, _callback);

    }

    /**
     * The Home Document is an entry point to the Core Capture Services.
     * The Home Document is an entry point to the Core Capture Services. It is available to any caller. Its main purposes it to provide discovery of the URIs necessary to interact with the service. It is retrieved by performing an HTTP GET on the base installation path. So for example if the REST service was installed into https://{host}/cp-rest/v2, then performing a GET on this URI would return the Home Document. Its main purposes is to provide discovery of the URIs necessary to interact with the service. All clients must start from the Home Document and follow the hrefs given in the link relations to the resources desired. This is important to ensure that your client applications will always work regardless of the URI changes that may take place under different deployment configurations of the service.
     * @param suppressResponseCodes This can be left without an assignment or you can use itself, suppress_response_codes&#x3D;suppress_response_codes (optional)
     * @return Get200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public Get200Response rootGet(String suppressResponseCodes) throws ApiException {
        ApiResponse<Get200Response> localVarResp = rootGetWithHttpInfo(suppressResponseCodes);
        return localVarResp.getData();
    }

    /**
     * The Home Document is an entry point to the Core Capture Services.
     * The Home Document is an entry point to the Core Capture Services. It is available to any caller. Its main purposes it to provide discovery of the URIs necessary to interact with the service. It is retrieved by performing an HTTP GET on the base installation path. So for example if the REST service was installed into https://{host}/cp-rest/v2, then performing a GET on this URI would return the Home Document. Its main purposes is to provide discovery of the URIs necessary to interact with the service. All clients must start from the Home Document and follow the hrefs given in the link relations to the resources desired. This is important to ensure that your client applications will always work regardless of the URI changes that may take place under different deployment configurations of the service.
     * @param suppressResponseCodes This can be left without an assignment or you can use itself, suppress_response_codes&#x3D;suppress_response_codes (optional)
     * @return ApiResponse&lt;Get200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Get200Response> rootGetWithHttpInfo(String suppressResponseCodes) throws ApiException {
        okhttp3.Call localVarCall = rootGetValidateBeforeCall(suppressResponseCodes, null);
        Type localVarReturnType = new TypeToken<Get200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * The Home Document is an entry point to the Core Capture Services. (asynchronously)
     * The Home Document is an entry point to the Core Capture Services. It is available to any caller. Its main purposes it to provide discovery of the URIs necessary to interact with the service. It is retrieved by performing an HTTP GET on the base installation path. So for example if the REST service was installed into https://{host}/cp-rest/v2, then performing a GET on this URI would return the Home Document. Its main purposes is to provide discovery of the URIs necessary to interact with the service. All clients must start from the Home Document and follow the hrefs given in the link relations to the resources desired. This is important to ensure that your client applications will always work regardless of the URI changes that may take place under different deployment configurations of the service.
     * @param suppressResponseCodes This can be left without an assignment or you can use itself, suppress_response_codes&#x3D;suppress_response_codes (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rootGetAsync(String suppressResponseCodes, final ApiCallback<Get200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = rootGetValidateBeforeCall(suppressResponseCodes, _callback);
        Type localVarReturnType = new TypeToken<Get200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
