/*
 * Core Capture Services
 * OpenText Core Capture Services are a set of RESTful web service interfaces that provides capture functionality. Being developed in a purely RESTful style, Core Capture Services are easier to consume for the purposes of writing custom clients.  Core Capture Services identifies resources by Uniform Resource Identifiers (URIs). It defines specific media types to represent resources and drives application state transfers by using link relations. It uses a limited number of HTTP standard methods (GET, POST, and DELETE) to manipulate these resources over the HTTP protocol.  Core Capture Services (hereafter simply called, \"service\") supports only the JSON format for resource representation. JavaScript Object Notation (JSON) is a lightweight data interchange format based on a subset of the JavaScript Programming Language standard.
 *
 * The version of the OpenAPI document: 23.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ot2.corecapture.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ot2.corecapture.model.DocItemContentContentFieldsInnerUiControlInfoRectangle;
import com.ot2.corecapture.model.UimDataNodeListInnerDataInnerChoicesInner;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ot2.corecapture.invoker.JSON;

/**
 * Information about the control for the field.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-10-13T23:29:40.322735800+05:30[Asia/Calcutta]")
public class DocItemContentContentFieldsInnerUiControlInfo {
  /**
   * Gets or Sets controlType
   */
  @JsonAdapter(ControlTypeEnum.Adapter.class)
  public enum ControlTypeEnum {
    TEXTBOX("TextBox"),
    
    CHOICETEXT("ChoiceText"),
    
    LISTBOX("ListBox"),
    
    CHECKBOX("CheckBox"),
    
    COMBOBOX("ComboBox");

    private String value;

    ControlTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ControlTypeEnum fromValue(String value) {
      for (ControlTypeEnum b : ControlTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ControlTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ControlTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ControlTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ControlTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CONTROL_TYPE = "controlType";
  @SerializedName(SERIALIZED_NAME_CONTROL_TYPE)
  private ControlTypeEnum controlType;

  public static final String SERIALIZED_NAME_LABEL_TEXT = "labelText";
  @SerializedName(SERIALIZED_NAME_LABEL_TEXT)
  private String labelText;

  public static final String SERIALIZED_NAME_TOOLTIP = "tooltip";
  @SerializedName(SERIALIZED_NAME_TOOLTIP)
  private String tooltip;

  public static final String SERIALIZED_NAME_CHOICES = "choices";
  @SerializedName(SERIALIZED_NAME_CHOICES)
  private List<UimDataNodeListInnerDataInnerChoicesInner> choices;

  public static final String SERIALIZED_NAME_MULTI_LINE = "multiLine";
  @SerializedName(SERIALIZED_NAME_MULTI_LINE)
  private Boolean multiLine;

  public static final String SERIALIZED_NAME_RECTANGLE = "rectangle";
  @SerializedName(SERIALIZED_NAME_RECTANGLE)
  private DocItemContentContentFieldsInnerUiControlInfoRectangle rectangle;

  public static final String SERIALIZED_NAME_LABEL_RECTANGLE = "labelRectangle";
  @SerializedName(SERIALIZED_NAME_LABEL_RECTANGLE)
  private DocItemContentContentFieldsInnerUiControlInfoRectangle labelRectangle;

  public DocItemContentContentFieldsInnerUiControlInfo() {
  }

  public DocItemContentContentFieldsInnerUiControlInfo controlType(ControlTypeEnum controlType) {
    
    this.controlType = controlType;
    return this;
  }

   /**
   * Get controlType
   * @return controlType
  **/
  @javax.annotation.Nullable
  public ControlTypeEnum getControlType() {
    return controlType;
  }


  public void setControlType(ControlTypeEnum controlType) {
    this.controlType = controlType;
  }


  public DocItemContentContentFieldsInnerUiControlInfo labelText(String labelText) {
    
    this.labelText = labelText;
    return this;
  }

   /**
   * The label for the field.
   * @return labelText
  **/
  @javax.annotation.Nullable
  public String getLabelText() {
    return labelText;
  }


  public void setLabelText(String labelText) {
    this.labelText = labelText;
  }


  public DocItemContentContentFieldsInnerUiControlInfo tooltip(String tooltip) {
    
    this.tooltip = tooltip;
    return this;
  }

   /**
   * The tooltip for the field.
   * @return tooltip
  **/
  @javax.annotation.Nullable
  public String getTooltip() {
    return tooltip;
  }


  public void setTooltip(String tooltip) {
    this.tooltip = tooltip;
  }


  public DocItemContentContentFieldsInnerUiControlInfo choices(List<UimDataNodeListInnerDataInnerChoicesInner> choices) {
    
    this.choices = choices;
    return this;
  }

  public DocItemContentContentFieldsInnerUiControlInfo addChoicesItem(UimDataNodeListInnerDataInnerChoicesInner choicesItem) {
    if (this.choices == null) {
      this.choices = new ArrayList<>();
    }
    this.choices.add(choicesItem);
    return this;
  }

   /**
   * Get choices
   * @return choices
  **/
  @javax.annotation.Nullable
  public List<UimDataNodeListInnerDataInnerChoicesInner> getChoices() {
    return choices;
  }


  public void setChoices(List<UimDataNodeListInnerDataInnerChoicesInner> choices) {
    this.choices = choices;
  }


  public DocItemContentContentFieldsInnerUiControlInfo multiLine(Boolean multiLine) {
    
    this.multiLine = multiLine;
    return this;
  }

   /**
   * True for a multiline TextBox; otherwise false.
   * @return multiLine
  **/
  @javax.annotation.Nullable
  public Boolean getMultiLine() {
    return multiLine;
  }


  public void setMultiLine(Boolean multiLine) {
    this.multiLine = multiLine;
  }


  public DocItemContentContentFieldsInnerUiControlInfo rectangle(DocItemContentContentFieldsInnerUiControlInfoRectangle rectangle) {
    
    this.rectangle = rectangle;
    return this;
  }

   /**
   * Get rectangle
   * @return rectangle
  **/
  @javax.annotation.Nullable
  public DocItemContentContentFieldsInnerUiControlInfoRectangle getRectangle() {
    return rectangle;
  }


  public void setRectangle(DocItemContentContentFieldsInnerUiControlInfoRectangle rectangle) {
    this.rectangle = rectangle;
  }


  public DocItemContentContentFieldsInnerUiControlInfo labelRectangle(DocItemContentContentFieldsInnerUiControlInfoRectangle labelRectangle) {
    
    this.labelRectangle = labelRectangle;
    return this;
  }

   /**
   * Get labelRectangle
   * @return labelRectangle
  **/
  @javax.annotation.Nullable
  public DocItemContentContentFieldsInnerUiControlInfoRectangle getLabelRectangle() {
    return labelRectangle;
  }


  public void setLabelRectangle(DocItemContentContentFieldsInnerUiControlInfoRectangle labelRectangle) {
    this.labelRectangle = labelRectangle;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocItemContentContentFieldsInnerUiControlInfo docItemContentContentFieldsInnerUiControlInfo = (DocItemContentContentFieldsInnerUiControlInfo) o;
    return Objects.equals(this.controlType, docItemContentContentFieldsInnerUiControlInfo.controlType) &&
        Objects.equals(this.labelText, docItemContentContentFieldsInnerUiControlInfo.labelText) &&
        Objects.equals(this.tooltip, docItemContentContentFieldsInnerUiControlInfo.tooltip) &&
        Objects.equals(this.choices, docItemContentContentFieldsInnerUiControlInfo.choices) &&
        Objects.equals(this.multiLine, docItemContentContentFieldsInnerUiControlInfo.multiLine) &&
        Objects.equals(this.rectangle, docItemContentContentFieldsInnerUiControlInfo.rectangle) &&
        Objects.equals(this.labelRectangle, docItemContentContentFieldsInnerUiControlInfo.labelRectangle);
  }

  @Override
  public int hashCode() {
    return Objects.hash(controlType, labelText, tooltip, choices, multiLine, rectangle, labelRectangle);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocItemContentContentFieldsInnerUiControlInfo {\n");
    sb.append("    controlType: ").append(toIndentedString(controlType)).append("\n");
    sb.append("    labelText: ").append(toIndentedString(labelText)).append("\n");
    sb.append("    tooltip: ").append(toIndentedString(tooltip)).append("\n");
    sb.append("    choices: ").append(toIndentedString(choices)).append("\n");
    sb.append("    multiLine: ").append(toIndentedString(multiLine)).append("\n");
    sb.append("    rectangle: ").append(toIndentedString(rectangle)).append("\n");
    sb.append("    labelRectangle: ").append(toIndentedString(labelRectangle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("controlType");
    openapiFields.add("labelText");
    openapiFields.add("tooltip");
    openapiFields.add("choices");
    openapiFields.add("multiLine");
    openapiFields.add("rectangle");
    openapiFields.add("labelRectangle");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DocItemContentContentFieldsInnerUiControlInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DocItemContentContentFieldsInnerUiControlInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DocItemContentContentFieldsInnerUiControlInfo is not found in the empty JSON string", DocItemContentContentFieldsInnerUiControlInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DocItemContentContentFieldsInnerUiControlInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DocItemContentContentFieldsInnerUiControlInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("controlType") != null && !jsonObj.get("controlType").isJsonNull()) && !jsonObj.get("controlType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `controlType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("controlType").toString()));
      }
      if ((jsonObj.get("labelText") != null && !jsonObj.get("labelText").isJsonNull()) && !jsonObj.get("labelText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `labelText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("labelText").toString()));
      }
      if ((jsonObj.get("tooltip") != null && !jsonObj.get("tooltip").isJsonNull()) && !jsonObj.get("tooltip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tooltip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tooltip").toString()));
      }
      if (jsonObj.get("choices") != null && !jsonObj.get("choices").isJsonNull()) {
        JsonArray jsonArraychoices = jsonObj.getAsJsonArray("choices");
        if (jsonArraychoices != null) {
          // ensure the json data is an array
          if (!jsonObj.get("choices").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `choices` to be an array in the JSON string but got `%s`", jsonObj.get("choices").toString()));
          }

          // validate the optional field `choices` (array)
          for (int i = 0; i < jsonArraychoices.size(); i++) {
            UimDataNodeListInnerDataInnerChoicesInner.validateJsonElement(jsonArraychoices.get(i));
          };
        }
      }
      // validate the optional field `rectangle`
      if (jsonObj.get("rectangle") != null && !jsonObj.get("rectangle").isJsonNull()) {
        DocItemContentContentFieldsInnerUiControlInfoRectangle.validateJsonElement(jsonObj.get("rectangle"));
      }
      // validate the optional field `labelRectangle`
      if (jsonObj.get("labelRectangle") != null && !jsonObj.get("labelRectangle").isJsonNull()) {
        DocItemContentContentFieldsInnerUiControlInfoRectangle.validateJsonElement(jsonObj.get("labelRectangle"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DocItemContentContentFieldsInnerUiControlInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DocItemContentContentFieldsInnerUiControlInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DocItemContentContentFieldsInnerUiControlInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DocItemContentContentFieldsInnerUiControlInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<DocItemContentContentFieldsInnerUiControlInfo>() {
           @Override
           public void write(JsonWriter out, DocItemContentContentFieldsInnerUiControlInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DocItemContentContentFieldsInnerUiControlInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DocItemContentContentFieldsInnerUiControlInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DocItemContentContentFieldsInnerUiControlInfo
  * @throws IOException if the JSON string is invalid with respect to DocItemContentContentFieldsInnerUiControlInfo
  */
  public static DocItemContentContentFieldsInnerUiControlInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DocItemContentContentFieldsInnerUiControlInfo.class);
  }

 /**
  * Convert an instance of DocItemContentContentFieldsInnerUiControlInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

