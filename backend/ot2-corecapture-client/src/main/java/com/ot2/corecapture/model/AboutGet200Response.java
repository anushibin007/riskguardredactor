/*
 * Core Capture Services
 * OpenText Core Capture Services are a set of RESTful web service interfaces that provides capture functionality. Being developed in a purely RESTful style, Core Capture Services are easier to consume for the purposes of writing custom clients.  Core Capture Services identifies resources by Uniform Resource Identifiers (URIs). It defines specific media types to represent resources and drives application state transfers by using link relations. It uses a limited number of HTTP standard methods (GET, POST, and DELETE) to manipulate these resources over the HTTP protocol.  Core Capture Services (hereafter simply called, \"service\") supports only the JSON format for resource representation. JavaScript Object Notation (JSON) is a lightweight data interchange format based on a subset of the JavaScript Programming Language standard.
 *
 * The version of the OpenAPI document: 23.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ot2.corecapture.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ot2.corecapture.model.ReturnStatusBody;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ot2.corecapture.invoker.JSON;

/**
 * AboutGet200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-10-14T00:05:58.836985800+05:30[Asia/Calcutta]")
public class AboutGet200Response {
  public static final String SERIALIZED_NAME_RETURN_STATUS = "returnStatus";
  @SerializedName(SERIALIZED_NAME_RETURN_STATUS)
  private ReturnStatusBody returnStatus;

  public static final String SERIALIZED_NAME_SERVICE_NAME = "serviceName";
  @SerializedName(SERIALIZED_NAME_SERVICE_NAME)
  private String serviceName;

  public static final String SERIALIZED_NAME_PRODUCT_NAME = "productName";
  @SerializedName(SERIALIZED_NAME_PRODUCT_NAME)
  private String productName;

  public static final String SERIALIZED_NAME_COPYRIGHT = "copyright";
  @SerializedName(SERIALIZED_NAME_COPYRIGHT)
  private String copyright;

  public static final String SERIALIZED_NAME_SERVICE_VERSION = "serviceVersion";
  @SerializedName(SERIALIZED_NAME_SERVICE_VERSION)
  private String serviceVersion;

  public static final String SERIALIZED_NAME_BUILD_VERSION = "buildVersion";
  @SerializedName(SERIALIZED_NAME_BUILD_VERSION)
  private String buildVersion;

  public static final String SERIALIZED_NAME_PRODUCT_VERSION = "productVersion";
  @SerializedName(SERIALIZED_NAME_PRODUCT_VERSION)
  private String productVersion;

  public static final String SERIALIZED_NAME_SCHEMA_VERSION = "schemaVersion";
  @SerializedName(SERIALIZED_NAME_SCHEMA_VERSION)
  private String schemaVersion;

  public static final String SERIALIZED_NAME_DESIGNER_VERSION = "designerVersion";
  @SerializedName(SERIALIZED_NAME_DESIGNER_VERSION)
  private String designerVersion;

  public static final String SERIALIZED_NAME_SERVER_DATE = "serverDate";
  @SerializedName(SERIALIZED_NAME_SERVER_DATE)
  private String serverDate;

  public static final String SERIALIZED_NAME_SERVER_ID = "serverId";
  @SerializedName(SERIALIZED_NAME_SERVER_ID)
  private String serverId;

  public static final String SERIALIZED_NAME_MIN_DESIGNER_VERSION = "minDesignerVersion";
  @SerializedName(SERIALIZED_NAME_MIN_DESIGNER_VERSION)
  private String minDesignerVersion;

  public AboutGet200Response() {
  }

  public AboutGet200Response returnStatus(ReturnStatusBody returnStatus) {
    
    this.returnStatus = returnStatus;
    return this;
  }

   /**
   * Get returnStatus
   * @return returnStatus
  **/
  @javax.annotation.Nullable
  public ReturnStatusBody getReturnStatus() {
    return returnStatus;
  }


  public void setReturnStatus(ReturnStatusBody returnStatus) {
    this.returnStatus = returnStatus;
  }


  public AboutGet200Response serviceName(String serviceName) {
    
    this.serviceName = serviceName;
    return this;
  }

   /**
   * Name of the service.
   * @return serviceName
  **/
  @javax.annotation.Nullable
  public String getServiceName() {
    return serviceName;
  }


  public void setServiceName(String serviceName) {
    this.serviceName = serviceName;
  }


  public AboutGet200Response productName(String productName) {
    
    this.productName = productName;
    return this;
  }

   /**
   * Name of the Product
   * @return productName
  **/
  @javax.annotation.Nullable
  public String getProductName() {
    return productName;
  }


  public void setProductName(String productName) {
    this.productName = productName;
  }


  public AboutGet200Response copyright(String copyright) {
    
    this.copyright = copyright;
    return this;
  }

   /**
   * Copyright string
   * @return copyright
  **/
  @javax.annotation.Nullable
  public String getCopyright() {
    return copyright;
  }


  public void setCopyright(String copyright) {
    this.copyright = copyright;
  }


  public AboutGet200Response serviceVersion(String serviceVersion) {
    
    this.serviceVersion = serviceVersion;
    return this;
  }

   /**
   * Four part version information for the Service.
   * @return serviceVersion
  **/
  @javax.annotation.Nullable
  public String getServiceVersion() {
    return serviceVersion;
  }


  public void setServiceVersion(String serviceVersion) {
    this.serviceVersion = serviceVersion;
  }


  public AboutGet200Response buildVersion(String buildVersion) {
    
    this.buildVersion = buildVersion;
    return this;
  }

   /**
   * Four part version for the build.
   * @return buildVersion
  **/
  @javax.annotation.Nullable
  public String getBuildVersion() {
    return buildVersion;
  }


  public void setBuildVersion(String buildVersion) {
    this.buildVersion = buildVersion;
  }


  public AboutGet200Response productVersion(String productVersion) {
    
    this.productVersion = productVersion;
    return this;
  }

   /**
   * Four part product version.
   * @return productVersion
  **/
  @javax.annotation.Nullable
  public String getProductVersion() {
    return productVersion;
  }


  public void setProductVersion(String productVersion) {
    this.productVersion = productVersion;
  }


  public AboutGet200Response schemaVersion(String schemaVersion) {
    
    this.schemaVersion = schemaVersion;
    return this;
  }

   /**
   * Table schema version (internal).
   * @return schemaVersion
  **/
  @javax.annotation.Nullable
  public String getSchemaVersion() {
    return schemaVersion;
  }


  public void setSchemaVersion(String schemaVersion) {
    this.schemaVersion = schemaVersion;
  }


  public AboutGet200Response designerVersion(String designerVersion) {
    
    this.designerVersion = designerVersion;
    return this;
  }

   /**
   * Designer tool version.
   * @return designerVersion
  **/
  @javax.annotation.Nullable
  public String getDesignerVersion() {
    return designerVersion;
  }


  public void setDesignerVersion(String designerVersion) {
    this.designerVersion = designerVersion;
  }


  public AboutGet200Response serverDate(String serverDate) {
    
    this.serverDate = serverDate;
    return this;
  }

   /**
   * Server date in UTC in ISO 8601 (e.g. 2006-04-17T21:22:48.2698750Z).
   * @return serverDate
  **/
  @javax.annotation.Nullable
  public String getServerDate() {
    return serverDate;
  }


  public void setServerDate(String serverDate) {
    this.serverDate = serverDate;
  }


  public AboutGet200Response serverId(String serverId) {
    
    this.serverId = serverId;
    return this;
  }

   /**
   * The server id that serviced the request.
   * @return serverId
  **/
  @javax.annotation.Nullable
  public String getServerId() {
    return serverId;
  }


  public void setServerId(String serverId) {
    this.serverId = serverId;
  }


  public AboutGet200Response minDesignerVersion(String minDesignerVersion) {
    
    this.minDesignerVersion = minDesignerVersion;
    return this;
  }

   /**
   * Minimum required Designer tool version.
   * @return minDesignerVersion
  **/
  @javax.annotation.Nullable
  public String getMinDesignerVersion() {
    return minDesignerVersion;
  }


  public void setMinDesignerVersion(String minDesignerVersion) {
    this.minDesignerVersion = minDesignerVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AboutGet200Response aboutGet200Response = (AboutGet200Response) o;
    return Objects.equals(this.returnStatus, aboutGet200Response.returnStatus) &&
        Objects.equals(this.serviceName, aboutGet200Response.serviceName) &&
        Objects.equals(this.productName, aboutGet200Response.productName) &&
        Objects.equals(this.copyright, aboutGet200Response.copyright) &&
        Objects.equals(this.serviceVersion, aboutGet200Response.serviceVersion) &&
        Objects.equals(this.buildVersion, aboutGet200Response.buildVersion) &&
        Objects.equals(this.productVersion, aboutGet200Response.productVersion) &&
        Objects.equals(this.schemaVersion, aboutGet200Response.schemaVersion) &&
        Objects.equals(this.designerVersion, aboutGet200Response.designerVersion) &&
        Objects.equals(this.serverDate, aboutGet200Response.serverDate) &&
        Objects.equals(this.serverId, aboutGet200Response.serverId) &&
        Objects.equals(this.minDesignerVersion, aboutGet200Response.minDesignerVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(returnStatus, serviceName, productName, copyright, serviceVersion, buildVersion, productVersion, schemaVersion, designerVersion, serverDate, serverId, minDesignerVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AboutGet200Response {\n");
    sb.append("    returnStatus: ").append(toIndentedString(returnStatus)).append("\n");
    sb.append("    serviceName: ").append(toIndentedString(serviceName)).append("\n");
    sb.append("    productName: ").append(toIndentedString(productName)).append("\n");
    sb.append("    copyright: ").append(toIndentedString(copyright)).append("\n");
    sb.append("    serviceVersion: ").append(toIndentedString(serviceVersion)).append("\n");
    sb.append("    buildVersion: ").append(toIndentedString(buildVersion)).append("\n");
    sb.append("    productVersion: ").append(toIndentedString(productVersion)).append("\n");
    sb.append("    schemaVersion: ").append(toIndentedString(schemaVersion)).append("\n");
    sb.append("    designerVersion: ").append(toIndentedString(designerVersion)).append("\n");
    sb.append("    serverDate: ").append(toIndentedString(serverDate)).append("\n");
    sb.append("    serverId: ").append(toIndentedString(serverId)).append("\n");
    sb.append("    minDesignerVersion: ").append(toIndentedString(minDesignerVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("returnStatus");
    openapiFields.add("serviceName");
    openapiFields.add("productName");
    openapiFields.add("copyright");
    openapiFields.add("serviceVersion");
    openapiFields.add("buildVersion");
    openapiFields.add("productVersion");
    openapiFields.add("schemaVersion");
    openapiFields.add("designerVersion");
    openapiFields.add("serverDate");
    openapiFields.add("serverId");
    openapiFields.add("minDesignerVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AboutGet200Response
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AboutGet200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AboutGet200Response is not found in the empty JSON string", AboutGet200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AboutGet200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AboutGet200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `returnStatus`
      if (jsonObj.get("returnStatus") != null && !jsonObj.get("returnStatus").isJsonNull()) {
        ReturnStatusBody.validateJsonElement(jsonObj.get("returnStatus"));
      }
      if ((jsonObj.get("serviceName") != null && !jsonObj.get("serviceName").isJsonNull()) && !jsonObj.get("serviceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceName").toString()));
      }
      if ((jsonObj.get("productName") != null && !jsonObj.get("productName").isJsonNull()) && !jsonObj.get("productName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productName").toString()));
      }
      if ((jsonObj.get("copyright") != null && !jsonObj.get("copyright").isJsonNull()) && !jsonObj.get("copyright").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `copyright` to be a primitive type in the JSON string but got `%s`", jsonObj.get("copyright").toString()));
      }
      if ((jsonObj.get("serviceVersion") != null && !jsonObj.get("serviceVersion").isJsonNull()) && !jsonObj.get("serviceVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceVersion").toString()));
      }
      if ((jsonObj.get("buildVersion") != null && !jsonObj.get("buildVersion").isJsonNull()) && !jsonObj.get("buildVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buildVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buildVersion").toString()));
      }
      if ((jsonObj.get("productVersion") != null && !jsonObj.get("productVersion").isJsonNull()) && !jsonObj.get("productVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productVersion").toString()));
      }
      if ((jsonObj.get("schemaVersion") != null && !jsonObj.get("schemaVersion").isJsonNull()) && !jsonObj.get("schemaVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemaVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schemaVersion").toString()));
      }
      if ((jsonObj.get("designerVersion") != null && !jsonObj.get("designerVersion").isJsonNull()) && !jsonObj.get("designerVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `designerVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("designerVersion").toString()));
      }
      if ((jsonObj.get("serverDate") != null && !jsonObj.get("serverDate").isJsonNull()) && !jsonObj.get("serverDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serverDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serverDate").toString()));
      }
      if ((jsonObj.get("serverId") != null && !jsonObj.get("serverId").isJsonNull()) && !jsonObj.get("serverId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serverId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serverId").toString()));
      }
      if ((jsonObj.get("minDesignerVersion") != null && !jsonObj.get("minDesignerVersion").isJsonNull()) && !jsonObj.get("minDesignerVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minDesignerVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minDesignerVersion").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AboutGet200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AboutGet200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AboutGet200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AboutGet200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<AboutGet200Response>() {
           @Override
           public void write(JsonWriter out, AboutGet200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AboutGet200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AboutGet200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AboutGet200Response
  * @throws IOException if the JSON string is invalid with respect to AboutGet200Response
  */
  public static AboutGet200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AboutGet200Response.class);
  }

 /**
  * Convert an instance of AboutGet200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

