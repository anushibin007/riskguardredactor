/*
 * Core Capture Services
 * OpenText Core Capture Services are a set of RESTful web service interfaces that provides capture functionality. Being developed in a purely RESTful style, Core Capture Services are easier to consume for the purposes of writing custom clients.  Core Capture Services identifies resources by Uniform Resource Identifiers (URIs). It defines specific media types to represent resources and drives application state transfers by using link relations. It uses a limited number of HTTP standard methods (GET, POST, and DELETE) to manipulate these resources over the HTTP protocol.  Core Capture Services (hereafter simply called, \"service\") supports only the JSON format for resource representation. JavaScript Object Notation (JSON) is a lightweight data interchange format based on a subset of the JavaScript Programming Language standard.
 *
 * The version of the OpenAPI document: 23.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ot2.corecapture.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ot2.corecapture.model.UimDataNodeListInnerDataInnerChoicesInner;
import com.ot2.corecapture.model.UimDataNodeListInnerDataInnerExtractedCharactersInner;
import com.ot2.corecapture.model.UimDataNodeListInnerDataInnerFieldError;
import com.ot2.corecapture.model.UimDataNodeListInnerDataInnerLocationRect;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ot2.corecapture.invoker.JSON;

/**
 * UimDataNodeListInnerDataInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-10-13T23:29:40.322735800+05:30[Asia/Calcutta]")
public class UimDataNodeListInnerDataInner {
  public static final String SERIALIZED_NAME_ARRAY_INDEX = "arrayIndex";
  @SerializedName(SERIALIZED_NAME_ARRAY_INDEX)
  private Integer arrayIndex;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private Object value;

  public static final String SERIALIZED_NAME_FIELD_ERROR = "fieldError";
  @SerializedName(SERIALIZED_NAME_FIELD_ERROR)
  private UimDataNodeListInnerDataInnerFieldError fieldError;

  public static final String SERIALIZED_NAME_MUST_CONFIRM = "mustConfirm";
  @SerializedName(SERIALIZED_NAME_MUST_CONFIRM)
  private Boolean mustConfirm;

  public static final String SERIALIZED_NAME_CHOICES = "choices";
  @SerializedName(SERIALIZED_NAME_CHOICES)
  private List<UimDataNodeListInnerDataInnerChoicesInner> choices;

  public static final String SERIALIZED_NAME_LOCATION_RECT = "locationRect";
  @SerializedName(SERIALIZED_NAME_LOCATION_RECT)
  private UimDataNodeListInnerDataInnerLocationRect locationRect;

  public static final String SERIALIZED_NAME_PAGE_ID = "pageId";
  @SerializedName(SERIALIZED_NAME_PAGE_ID)
  private Integer pageId;

  public static final String SERIALIZED_NAME_CONFIDENCE = "confidence";
  @SerializedName(SERIALIZED_NAME_CONFIDENCE)
  private Integer confidence;

  public static final String SERIALIZED_NAME_EXTRACTED_CHARACTERS = "extractedCharacters";
  @SerializedName(SERIALIZED_NAME_EXTRACTED_CHARACTERS)
  private List<UimDataNodeListInnerDataInnerExtractedCharactersInner> extractedCharacters;

  public UimDataNodeListInnerDataInner() {
  }

  public UimDataNodeListInnerDataInner arrayIndex(Integer arrayIndex) {
    
    this.arrayIndex = arrayIndex;
    return this;
  }

   /**
   * If the field is an array field, this is the array index.
   * @return arrayIndex
  **/
  @javax.annotation.Nullable
  public Integer getArrayIndex() {
    return arrayIndex;
  }


  public void setArrayIndex(Integer arrayIndex) {
    this.arrayIndex = arrayIndex;
  }


  public UimDataNodeListInnerDataInner value(Object value) {
    
    this.value = value;
    return this;
  }

   /**
   * The value of the field.
   * @return value
  **/
  @javax.annotation.Nullable
  public Object getValue() {
    return value;
  }


  public void setValue(Object value) {
    this.value = value;
  }


  public UimDataNodeListInnerDataInner fieldError(UimDataNodeListInnerDataInnerFieldError fieldError) {
    
    this.fieldError = fieldError;
    return this;
  }

   /**
   * Get fieldError
   * @return fieldError
  **/
  @javax.annotation.Nullable
  public UimDataNodeListInnerDataInnerFieldError getFieldError() {
    return fieldError;
  }


  public void setFieldError(UimDataNodeListInnerDataInnerFieldError fieldError) {
    this.fieldError = fieldError;
  }


  public UimDataNodeListInnerDataInner mustConfirm(Boolean mustConfirm) {
    
    this.mustConfirm = mustConfirm;
    return this;
  }

   /**
   * True if the user must confirm; otherwise, false.
   * @return mustConfirm
  **/
  @javax.annotation.Nullable
  public Boolean getMustConfirm() {
    return mustConfirm;
  }


  public void setMustConfirm(Boolean mustConfirm) {
    this.mustConfirm = mustConfirm;
  }


  public UimDataNodeListInnerDataInner choices(List<UimDataNodeListInnerDataInnerChoicesInner> choices) {
    
    this.choices = choices;
    return this;
  }

  public UimDataNodeListInnerDataInner addChoicesItem(UimDataNodeListInnerDataInnerChoicesInner choicesItem) {
    if (this.choices == null) {
      this.choices = new ArrayList<>();
    }
    this.choices.add(choicesItem);
    return this;
  }

   /**
   * Get choices
   * @return choices
  **/
  @javax.annotation.Nullable
  public List<UimDataNodeListInnerDataInnerChoicesInner> getChoices() {
    return choices;
  }


  public void setChoices(List<UimDataNodeListInnerDataInnerChoicesInner> choices) {
    this.choices = choices;
  }


  public UimDataNodeListInnerDataInner locationRect(UimDataNodeListInnerDataInnerLocationRect locationRect) {
    
    this.locationRect = locationRect;
    return this;
  }

   /**
   * Get locationRect
   * @return locationRect
  **/
  @javax.annotation.Nullable
  public UimDataNodeListInnerDataInnerLocationRect getLocationRect() {
    return locationRect;
  }


  public void setLocationRect(UimDataNodeListInnerDataInnerLocationRect locationRect) {
    this.locationRect = locationRect;
  }


  public UimDataNodeListInnerDataInner pageId(Integer pageId) {
    
    this.pageId = pageId;
    return this;
  }

   /**
   * The ID of the page on which this field value is found. In the learning call, the 0-based page number in the document.
   * @return pageId
  **/
  @javax.annotation.Nullable
  public Integer getPageId() {
    return pageId;
  }


  public void setPageId(Integer pageId) {
    this.pageId = pageId;
  }


  public UimDataNodeListInnerDataInner confidence(Integer confidence) {
    
    this.confidence = confidence;
    return this;
  }

   /**
   * Extracted data accuracy confidence as a percent between 0 and 100.
   * @return confidence
  **/
  @javax.annotation.Nullable
  public Integer getConfidence() {
    return confidence;
  }


  public void setConfidence(Integer confidence) {
    this.confidence = confidence;
  }


  public UimDataNodeListInnerDataInner extractedCharacters(List<UimDataNodeListInnerDataInnerExtractedCharactersInner> extractedCharacters) {
    
    this.extractedCharacters = extractedCharacters;
    return this;
  }

  public UimDataNodeListInnerDataInner addExtractedCharactersItem(UimDataNodeListInnerDataInnerExtractedCharactersInner extractedCharactersItem) {
    if (this.extractedCharacters == null) {
      this.extractedCharacters = new ArrayList<>();
    }
    this.extractedCharacters.add(extractedCharactersItem);
    return this;
  }

   /**
   * This contains information about each extracted character.
   * @return extractedCharacters
  **/
  @javax.annotation.Nullable
  public List<UimDataNodeListInnerDataInnerExtractedCharactersInner> getExtractedCharacters() {
    return extractedCharacters;
  }


  public void setExtractedCharacters(List<UimDataNodeListInnerDataInnerExtractedCharactersInner> extractedCharacters) {
    this.extractedCharacters = extractedCharacters;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UimDataNodeListInnerDataInner uimDataNodeListInnerDataInner = (UimDataNodeListInnerDataInner) o;
    return Objects.equals(this.arrayIndex, uimDataNodeListInnerDataInner.arrayIndex) &&
        Objects.equals(this.value, uimDataNodeListInnerDataInner.value) &&
        Objects.equals(this.fieldError, uimDataNodeListInnerDataInner.fieldError) &&
        Objects.equals(this.mustConfirm, uimDataNodeListInnerDataInner.mustConfirm) &&
        Objects.equals(this.choices, uimDataNodeListInnerDataInner.choices) &&
        Objects.equals(this.locationRect, uimDataNodeListInnerDataInner.locationRect) &&
        Objects.equals(this.pageId, uimDataNodeListInnerDataInner.pageId) &&
        Objects.equals(this.confidence, uimDataNodeListInnerDataInner.confidence) &&
        Objects.equals(this.extractedCharacters, uimDataNodeListInnerDataInner.extractedCharacters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arrayIndex, value, fieldError, mustConfirm, choices, locationRect, pageId, confidence, extractedCharacters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UimDataNodeListInnerDataInner {\n");
    sb.append("    arrayIndex: ").append(toIndentedString(arrayIndex)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    fieldError: ").append(toIndentedString(fieldError)).append("\n");
    sb.append("    mustConfirm: ").append(toIndentedString(mustConfirm)).append("\n");
    sb.append("    choices: ").append(toIndentedString(choices)).append("\n");
    sb.append("    locationRect: ").append(toIndentedString(locationRect)).append("\n");
    sb.append("    pageId: ").append(toIndentedString(pageId)).append("\n");
    sb.append("    confidence: ").append(toIndentedString(confidence)).append("\n");
    sb.append("    extractedCharacters: ").append(toIndentedString(extractedCharacters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arrayIndex");
    openapiFields.add("value");
    openapiFields.add("fieldError");
    openapiFields.add("mustConfirm");
    openapiFields.add("choices");
    openapiFields.add("locationRect");
    openapiFields.add("pageId");
    openapiFields.add("confidence");
    openapiFields.add("extractedCharacters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to UimDataNodeListInnerDataInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UimDataNodeListInnerDataInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UimDataNodeListInnerDataInner is not found in the empty JSON string", UimDataNodeListInnerDataInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UimDataNodeListInnerDataInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UimDataNodeListInnerDataInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `fieldError`
      if (jsonObj.get("fieldError") != null && !jsonObj.get("fieldError").isJsonNull()) {
        UimDataNodeListInnerDataInnerFieldError.validateJsonElement(jsonObj.get("fieldError"));
      }
      if (jsonObj.get("choices") != null && !jsonObj.get("choices").isJsonNull()) {
        JsonArray jsonArraychoices = jsonObj.getAsJsonArray("choices");
        if (jsonArraychoices != null) {
          // ensure the json data is an array
          if (!jsonObj.get("choices").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `choices` to be an array in the JSON string but got `%s`", jsonObj.get("choices").toString()));
          }

          // validate the optional field `choices` (array)
          for (int i = 0; i < jsonArraychoices.size(); i++) {
            UimDataNodeListInnerDataInnerChoicesInner.validateJsonElement(jsonArraychoices.get(i));
          };
        }
      }
      // validate the optional field `locationRect`
      if (jsonObj.get("locationRect") != null && !jsonObj.get("locationRect").isJsonNull()) {
        UimDataNodeListInnerDataInnerLocationRect.validateJsonElement(jsonObj.get("locationRect"));
      }
      if (jsonObj.get("extractedCharacters") != null && !jsonObj.get("extractedCharacters").isJsonNull()) {
        JsonArray jsonArrayextractedCharacters = jsonObj.getAsJsonArray("extractedCharacters");
        if (jsonArrayextractedCharacters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("extractedCharacters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `extractedCharacters` to be an array in the JSON string but got `%s`", jsonObj.get("extractedCharacters").toString()));
          }

          // validate the optional field `extractedCharacters` (array)
          for (int i = 0; i < jsonArrayextractedCharacters.size(); i++) {
            UimDataNodeListInnerDataInnerExtractedCharactersInner.validateJsonElement(jsonArrayextractedCharacters.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UimDataNodeListInnerDataInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UimDataNodeListInnerDataInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UimDataNodeListInnerDataInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UimDataNodeListInnerDataInner.class));

       return (TypeAdapter<T>) new TypeAdapter<UimDataNodeListInnerDataInner>() {
           @Override
           public void write(JsonWriter out, UimDataNodeListInnerDataInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UimDataNodeListInnerDataInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UimDataNodeListInnerDataInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UimDataNodeListInnerDataInner
  * @throws IOException if the JSON string is invalid with respect to UimDataNodeListInnerDataInner
  */
  public static UimDataNodeListInnerDataInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UimDataNodeListInnerDataInner.class);
  }

 /**
  * Convert an instance of UimDataNodeListInnerDataInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

