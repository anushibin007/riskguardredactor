/*
 * Core Capture Services
 * OpenText Core Capture Services are a set of RESTful web service interfaces that provides capture functionality. Being developed in a purely RESTful style, Core Capture Services are easier to consume for the purposes of writing custom clients.  Core Capture Services identifies resources by Uniform Resource Identifiers (URIs). It defines specific media types to represent resources and drives application state transfers by using link relations. It uses a limited number of HTTP standard methods (GET, POST, and DELETE) to manipulate these resources over the HTTP protocol.  Core Capture Services (hereafter simply called, \"service\") supports only the JSON format for resource representation. JavaScript Object Notation (JSON) is a lightweight data interchange format based on a subset of the JavaScript Programming Language standard.
 *
 * The version of the OpenAPI document: 23.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ot2.corecapture.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ot2.corecapture.model.Env;
import com.ot2.corecapture.model.SessionBatchesPostRequestNodesInner;
import com.ot2.corecapture.model.SessionBatchesPostRequestValuesInner;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ot2.corecapture.invoker.JSON;

/**
 * SessionBatchesPostRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-10-08T16:42:46.583230500+05:30[Asia/Calcutta]")
public class SessionBatchesPostRequest {
  public static final String SERIALIZED_NAME_ENV = "env";
  @SerializedName(SERIALIZED_NAME_ENV)
  private Env env = Env.P;

  public static final String SERIALIZED_NAME_CAPTURE_FLOW = "captureFlow";
  @SerializedName(SERIALIZED_NAME_CAPTURE_FLOW)
  private String captureFlow;

  public static final String SERIALIZED_NAME_BATCH_NAME = "batchName";
  @SerializedName(SERIALIZED_NAME_BATCH_NAME)
  private String batchName;

  public static final String SERIALIZED_NAME_BATCH_ROOT_LEVEL = "batchRootLevel";
  @SerializedName(SERIALIZED_NAME_BATCH_ROOT_LEVEL)
  private Integer batchRootLevel;

  public static final String SERIALIZED_NAME_BATCH_PRIORITY = "batchPriority";
  @SerializedName(SERIALIZED_NAME_BATCH_PRIORITY)
  private Integer batchPriority = 50;

  /**
   * One of \&quot;AutoFormatLocal\&quot;, \&quot;AutoFormatFtp\&quot;, \&quot;Custom\&quot;, \&quot;IAServer\&quot;. Default value is \&quot;AutoFormatLocal\&quot;.
   */
  @JsonAdapter(ExportTypeEnum.Adapter.class)
  public enum ExportTypeEnum {
    AUTOFORMATLOCAL("AutoFormatLocal"),
    
    AUTOFORMATFTP("AutoFormatFtp"),
    
    CUSTOM("Custom"),
    
    IASERVER("IAServer");

    private String value;

    ExportTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExportTypeEnum fromValue(String value) {
      for (ExportTypeEnum b : ExportTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExportTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExportTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExportTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExportTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_EXPORT_TYPE = "exportType";
  @SerializedName(SERIALIZED_NAME_EXPORT_TYPE)
  private ExportTypeEnum exportType = ExportTypeEnum.AUTOFORMATLOCAL;

  /**
   * One of \&quot;None\&quot;, \&quot;OnePerDocument\&quot;, \&quot;OnePerFolder\&quot;. Default is \&quot;None\&quot;.
   */
  @JsonAdapter(PdfGenerationEnum.Adapter.class)
  public enum PdfGenerationEnum {
    NONE("None"),
    
    ONEPERDOCUMENT("OnePerDocument"),
    
    ONEPERFOLDER("OnePerFolder");

    private String value;

    PdfGenerationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PdfGenerationEnum fromValue(String value) {
      for (PdfGenerationEnum b : PdfGenerationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PdfGenerationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PdfGenerationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PdfGenerationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PdfGenerationEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PDF_GENERATION = "pdfGeneration";
  @SerializedName(SERIALIZED_NAME_PDF_GENERATION)
  private PdfGenerationEnum pdfGeneration = PdfGenerationEnum.NONE;

  public static final String SERIALIZED_NAME_FTP_CONNECTION = "ftpConnection";
  @SerializedName(SERIALIZED_NAME_FTP_CONNECTION)
  private String ftpConnection;

  public static final String SERIALIZED_NAME_AUTO_FORMAT_EXCLUDE_IMAGES = "autoFormatExcludeImages";
  @SerializedName(SERIALIZED_NAME_AUTO_FORMAT_EXCLUDE_IMAGES)
  private Boolean autoFormatExcludeImages;

  public static final String SERIALIZED_NAME_I_A_SERVER_CONNECTION = "iAServerConnection";
  @SerializedName(SERIALIZED_NAME_I_A_SERVER_CONNECTION)
  private String iAServerConnection;

  public static final String SERIALIZED_NAME_MACHINE_ID = "machineId";
  @SerializedName(SERIALIZED_NAME_MACHINE_ID)
  private String machineId;

  /**
   * One \&quot;S\&quot; or \&quot;A\&quot;, Default is \&quot;S\&quot;. S â€“ Synchronous, A - Asynchronous
   */
  @JsonAdapter(DispatchEnum.Adapter.class)
  public enum DispatchEnum {
    S("S"),
    
    A("A");

    private String value;

    DispatchEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DispatchEnum fromValue(String value) {
      for (DispatchEnum b : DispatchEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DispatchEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DispatchEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DispatchEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DispatchEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DISPATCH = "dispatch";
  @SerializedName(SERIALIZED_NAME_DISPATCH)
  private DispatchEnum dispatch = DispatchEnum.A;

  public static final String SERIALIZED_NAME_NODES = "nodes";
  @SerializedName(SERIALIZED_NAME_NODES)
  private List<SessionBatchesPostRequestNodesInner> nodes = new ArrayList<>();

  public static final String SERIALIZED_NAME_VALUES = "values";
  @SerializedName(SERIALIZED_NAME_VALUES)
  private List<SessionBatchesPostRequestValuesInner> values;

  public SessionBatchesPostRequest() {
  }

  public SessionBatchesPostRequest env(Env env) {
    
    this.env = env;
    return this;
  }

   /**
   * Get env
   * @return env
  **/
  @javax.annotation.Nonnull
  public Env getEnv() {
    return env;
  }


  public void setEnv(Env env) {
    this.env = env;
  }


  public SessionBatchesPostRequest captureFlow(String captureFlow) {
    
    this.captureFlow = captureFlow;
    return this;
  }

   /**
   * CaptureFlow name. Required only of exportType is \&quot;IAServer\&quot;
   * @return captureFlow
  **/
  @javax.annotation.Nullable
  public String getCaptureFlow() {
    return captureFlow;
  }


  public void setCaptureFlow(String captureFlow) {
    this.captureFlow = captureFlow;
  }


  public SessionBatchesPostRequest batchName(String batchName) {
    
    this.batchName = batchName;
    return this;
  }

   /**
   * Required string. Batch name (schema available). Has to be unique.
   * @return batchName
  **/
  @javax.annotation.Nonnull
  public String getBatchName() {
    return batchName;
  }


  public void setBatchName(String batchName) {
    this.batchName = batchName;
  }


  public SessionBatchesPostRequest batchRootLevel(Integer batchRootLevel) {
    
    this.batchRootLevel = batchRootLevel;
    return this;
  }

   /**
   * Required Integer. 0 based, must be between 1 and 7.
   * minimum: 1
   * maximum: 7
   * @return batchRootLevel
  **/
  @javax.annotation.Nonnull
  public Integer getBatchRootLevel() {
    return batchRootLevel;
  }


  public void setBatchRootLevel(Integer batchRootLevel) {
    this.batchRootLevel = batchRootLevel;
  }


  public SessionBatchesPostRequest batchPriority(Integer batchPriority) {
    
    this.batchPriority = batchPriority;
    return this;
  }

   /**
   * Batch priority. It must be between 0 and 100. If not supplied, it will default to 50. This is only used when exporting to an Intelligent Capture Server
   * minimum: 0
   * maximum: 100
   * @return batchPriority
  **/
  @javax.annotation.Nullable
  public Integer getBatchPriority() {
    return batchPriority;
  }


  public void setBatchPriority(Integer batchPriority) {
    this.batchPriority = batchPriority;
  }


  public SessionBatchesPostRequest exportType(ExportTypeEnum exportType) {
    
    this.exportType = exportType;
    return this;
  }

   /**
   * One of \&quot;AutoFormatLocal\&quot;, \&quot;AutoFormatFtp\&quot;, \&quot;Custom\&quot;, \&quot;IAServer\&quot;. Default value is \&quot;AutoFormatLocal\&quot;.
   * @return exportType
  **/
  @javax.annotation.Nullable
  public ExportTypeEnum getExportType() {
    return exportType;
  }


  public void setExportType(ExportTypeEnum exportType) {
    this.exportType = exportType;
  }


  public SessionBatchesPostRequest pdfGeneration(PdfGenerationEnum pdfGeneration) {
    
    this.pdfGeneration = pdfGeneration;
    return this;
  }

   /**
   * One of \&quot;None\&quot;, \&quot;OnePerDocument\&quot;, \&quot;OnePerFolder\&quot;. Default is \&quot;None\&quot;.
   * @return pdfGeneration
  **/
  @javax.annotation.Nullable
  public PdfGenerationEnum getPdfGeneration() {
    return pdfGeneration;
  }


  public void setPdfGeneration(PdfGenerationEnum pdfGeneration) {
    this.pdfGeneration = pdfGeneration;
  }


  public SessionBatchesPostRequest ftpConnection(String ftpConnection) {
    
    this.ftpConnection = ftpConnection;
    return this;
  }

   /**
   * Required only if exportType is \&quot;AutoFormatFtp\&quot;.
   * @return ftpConnection
  **/
  @javax.annotation.Nullable
  public String getFtpConnection() {
    return ftpConnection;
  }


  public void setFtpConnection(String ftpConnection) {
    this.ftpConnection = ftpConnection;
  }


  public SessionBatchesPostRequest autoFormatExcludeImages(Boolean autoFormatExcludeImages) {
    
    this.autoFormatExcludeImages = autoFormatExcludeImages;
    return this;
  }

   /**
   * Required if exportType is \&quot;AutoFormatLocal\&quot; or \&quot;AutoFormatFtp\&quot;.
   * @return autoFormatExcludeImages
  **/
  @javax.annotation.Nullable
  public Boolean getAutoFormatExcludeImages() {
    return autoFormatExcludeImages;
  }


  public void setAutoFormatExcludeImages(Boolean autoFormatExcludeImages) {
    this.autoFormatExcludeImages = autoFormatExcludeImages;
  }


  public SessionBatchesPostRequest iAServerConnection(String iAServerConnection) {
    
    this.iAServerConnection = iAServerConnection;
    return this;
  }

   /**
   * Required only if exportType is \&quot;IAServer\&quot;.
   * @return iAServerConnection
  **/
  @javax.annotation.Nullable
  public String getiAServerConnection() {
    return iAServerConnection;
  }


  public void setiAServerConnection(String iAServerConnection) {
    this.iAServerConnection = iAServerConnection;
  }


  public SessionBatchesPostRequest machineId(String machineId) {
    
    this.machineId = machineId;
    return this;
  }

   /**
   * Id of machine creating this batch.
   * @return machineId
  **/
  @javax.annotation.Nullable
  public String getMachineId() {
    return machineId;
  }


  public void setMachineId(String machineId) {
    this.machineId = machineId;
  }


  public SessionBatchesPostRequest dispatch(DispatchEnum dispatch) {
    
    this.dispatch = dispatch;
    return this;
  }

   /**
   * One \&quot;S\&quot; or \&quot;A\&quot;, Default is \&quot;S\&quot;. S â€“ Synchronous, A - Asynchronous
   * @return dispatch
  **/
  @javax.annotation.Nullable
  public DispatchEnum getDispatch() {
    return dispatch;
  }


  public void setDispatch(DispatchEnum dispatch) {
    this.dispatch = dispatch;
  }


  public SessionBatchesPostRequest nodes(List<SessionBatchesPostRequestNodesInner> nodes) {
    
    this.nodes = nodes;
    return this;
  }

  public SessionBatchesPostRequest addNodesItem(SessionBatchesPostRequestNodesInner nodesItem) {
    if (this.nodes == null) {
      this.nodes = new ArrayList<>();
    }
    this.nodes.add(nodesItem);
    return this;
  }

   /**
   * Required. Nodes are processed in given order.
   * @return nodes
  **/
  @javax.annotation.Nonnull
  public List<SessionBatchesPostRequestNodesInner> getNodes() {
    return nodes;
  }


  public void setNodes(List<SessionBatchesPostRequestNodesInner> nodes) {
    this.nodes = nodes;
  }


  public SessionBatchesPostRequest values(List<SessionBatchesPostRequestValuesInner> values) {
    
    this.values = values;
    return this;
  }

  public SessionBatchesPostRequest addValuesItem(SessionBatchesPostRequestValuesInner valuesItem) {
    if (this.values == null) {
      this.values = new ArrayList<>();
    }
    this.values.add(valuesItem);
    return this;
  }

   /**
   * Values are processed in the given order and the last writer wins.
   * @return values
  **/
  @javax.annotation.Nullable
  public List<SessionBatchesPostRequestValuesInner> getValues() {
    return values;
  }


  public void setValues(List<SessionBatchesPostRequestValuesInner> values) {
    this.values = values;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SessionBatchesPostRequest sessionBatchesPostRequest = (SessionBatchesPostRequest) o;
    return Objects.equals(this.env, sessionBatchesPostRequest.env) &&
        Objects.equals(this.captureFlow, sessionBatchesPostRequest.captureFlow) &&
        Objects.equals(this.batchName, sessionBatchesPostRequest.batchName) &&
        Objects.equals(this.batchRootLevel, sessionBatchesPostRequest.batchRootLevel) &&
        Objects.equals(this.batchPriority, sessionBatchesPostRequest.batchPriority) &&
        Objects.equals(this.exportType, sessionBatchesPostRequest.exportType) &&
        Objects.equals(this.pdfGeneration, sessionBatchesPostRequest.pdfGeneration) &&
        Objects.equals(this.ftpConnection, sessionBatchesPostRequest.ftpConnection) &&
        Objects.equals(this.autoFormatExcludeImages, sessionBatchesPostRequest.autoFormatExcludeImages) &&
        Objects.equals(this.iAServerConnection, sessionBatchesPostRequest.iAServerConnection) &&
        Objects.equals(this.machineId, sessionBatchesPostRequest.machineId) &&
        Objects.equals(this.dispatch, sessionBatchesPostRequest.dispatch) &&
        Objects.equals(this.nodes, sessionBatchesPostRequest.nodes) &&
        Objects.equals(this.values, sessionBatchesPostRequest.values);
  }

  @Override
  public int hashCode() {
    return Objects.hash(env, captureFlow, batchName, batchRootLevel, batchPriority, exportType, pdfGeneration, ftpConnection, autoFormatExcludeImages, iAServerConnection, machineId, dispatch, nodes, values);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SessionBatchesPostRequest {\n");
    sb.append("    env: ").append(toIndentedString(env)).append("\n");
    sb.append("    captureFlow: ").append(toIndentedString(captureFlow)).append("\n");
    sb.append("    batchName: ").append(toIndentedString(batchName)).append("\n");
    sb.append("    batchRootLevel: ").append(toIndentedString(batchRootLevel)).append("\n");
    sb.append("    batchPriority: ").append(toIndentedString(batchPriority)).append("\n");
    sb.append("    exportType: ").append(toIndentedString(exportType)).append("\n");
    sb.append("    pdfGeneration: ").append(toIndentedString(pdfGeneration)).append("\n");
    sb.append("    ftpConnection: ").append(toIndentedString(ftpConnection)).append("\n");
    sb.append("    autoFormatExcludeImages: ").append(toIndentedString(autoFormatExcludeImages)).append("\n");
    sb.append("    iAServerConnection: ").append(toIndentedString(iAServerConnection)).append("\n");
    sb.append("    machineId: ").append(toIndentedString(machineId)).append("\n");
    sb.append("    dispatch: ").append(toIndentedString(dispatch)).append("\n");
    sb.append("    nodes: ").append(toIndentedString(nodes)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("env");
    openapiFields.add("captureFlow");
    openapiFields.add("batchName");
    openapiFields.add("batchRootLevel");
    openapiFields.add("batchPriority");
    openapiFields.add("exportType");
    openapiFields.add("pdfGeneration");
    openapiFields.add("ftpConnection");
    openapiFields.add("autoFormatExcludeImages");
    openapiFields.add("iAServerConnection");
    openapiFields.add("machineId");
    openapiFields.add("dispatch");
    openapiFields.add("nodes");
    openapiFields.add("values");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("env");
    openapiRequiredFields.add("batchName");
    openapiRequiredFields.add("batchRootLevel");
    openapiRequiredFields.add("nodes");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SessionBatchesPostRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SessionBatchesPostRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SessionBatchesPostRequest is not found in the empty JSON string", SessionBatchesPostRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SessionBatchesPostRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SessionBatchesPostRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SessionBatchesPostRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("captureFlow") != null && !jsonObj.get("captureFlow").isJsonNull()) && !jsonObj.get("captureFlow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `captureFlow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("captureFlow").toString()));
      }
      if (!jsonObj.get("batchName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `batchName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("batchName").toString()));
      }
      if ((jsonObj.get("exportType") != null && !jsonObj.get("exportType").isJsonNull()) && !jsonObj.get("exportType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exportType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exportType").toString()));
      }
      if ((jsonObj.get("pdfGeneration") != null && !jsonObj.get("pdfGeneration").isJsonNull()) && !jsonObj.get("pdfGeneration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pdfGeneration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pdfGeneration").toString()));
      }
      if ((jsonObj.get("ftpConnection") != null && !jsonObj.get("ftpConnection").isJsonNull()) && !jsonObj.get("ftpConnection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ftpConnection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ftpConnection").toString()));
      }
      if ((jsonObj.get("iAServerConnection") != null && !jsonObj.get("iAServerConnection").isJsonNull()) && !jsonObj.get("iAServerConnection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iAServerConnection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iAServerConnection").toString()));
      }
      if ((jsonObj.get("machineId") != null && !jsonObj.get("machineId").isJsonNull()) && !jsonObj.get("machineId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `machineId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("machineId").toString()));
      }
      if ((jsonObj.get("dispatch") != null && !jsonObj.get("dispatch").isJsonNull()) && !jsonObj.get("dispatch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dispatch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dispatch").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("nodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `nodes` to be an array in the JSON string but got `%s`", jsonObj.get("nodes").toString()));
      }

      JsonArray jsonArraynodes = jsonObj.getAsJsonArray("nodes");
      // validate the required field `nodes` (array)
      for (int i = 0; i < jsonArraynodes.size(); i++) {
        SessionBatchesPostRequestNodesInner.validateJsonElement(jsonArraynodes.get(i));
      };
      if (jsonObj.get("values") != null && !jsonObj.get("values").isJsonNull()) {
        JsonArray jsonArrayvalues = jsonObj.getAsJsonArray("values");
        if (jsonArrayvalues != null) {
          // ensure the json data is an array
          if (!jsonObj.get("values").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `values` to be an array in the JSON string but got `%s`", jsonObj.get("values").toString()));
          }

          // validate the optional field `values` (array)
          for (int i = 0; i < jsonArrayvalues.size(); i++) {
            SessionBatchesPostRequestValuesInner.validateJsonElement(jsonArrayvalues.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SessionBatchesPostRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SessionBatchesPostRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SessionBatchesPostRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SessionBatchesPostRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SessionBatchesPostRequest>() {
           @Override
           public void write(JsonWriter out, SessionBatchesPostRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SessionBatchesPostRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SessionBatchesPostRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SessionBatchesPostRequest
  * @throws IOException if the JSON string is invalid with respect to SessionBatchesPostRequest
  */
  public static SessionBatchesPostRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SessionBatchesPostRequest.class);
  }

 /**
  * Convert an instance of SessionBatchesPostRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

