/*
 * Core Capture Services
 * OpenText Core Capture Services are a set of RESTful web service interfaces that provides capture functionality. Being developed in a purely RESTful style, Core Capture Services are easier to consume for the purposes of writing custom clients.  Core Capture Services identifies resources by Uniform Resource Identifiers (URIs). It defines specific media types to represent resources and drives application state transfers by using link relations. It uses a limited number of HTTP standard methods (GET, POST, and DELETE) to manipulate these resources over the HTTP protocol.  Core Capture Services (hereafter simply called, \"service\") supports only the JSON format for resource representation. JavaScript Object Notation (JSON) is a lightweight data interchange format based on a subset of the JavaScript Programming Language standard.
 *
 * The version of the OpenAPI document: 23.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ot2.corecapture.api;

import com.ot2.corecapture.invoker.ApiException;
import com.ot2.corecapture.model.Get415Response;
import com.ot2.corecapture.model.SessionBatchesPost201Response;
import com.ot2.corecapture.model.SessionBatchesPostRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BatchApi
 */
@Disabled
public class BatchApiTest {

    private final BatchApi api = new BatchApi();

    /**
     * Creates and exports a batch.
     *
     * The Create and Export Batch operation is the last call required to create a batch and submit it to your backend server. First submit all image files to server, then you can use the returned file reference ids to reference files in the Batch nodal information. You can also use the same file reference ids returned by Real-Time service calls.  The batch name that you use to create a batch has to be unique when being imported into your backend server. To help you accomplish creating unique names you can supply for the \&quot;batchName\&quot; JSON property any Capture Services Format Expression function (see the Designer Documentation). There are also two additional format tokens you can use for providing unique names - {NextIndex} and {NextId}  **{NextIndex}** - This will provide a 64 bit integer number that is unique. Example: \&quot;batchName\&quot;:\&quot;MyBatch_{NextIndex}\&quot; produces on the server MyBatch_1026000000002  **{NextId}** - This will provide a valid Batch name string that is unique. Example: \&quot;batchName\&quot;:\&quot;MyBatch_{NextId}\&quot; produces on the server MyBatch_324_1  Any supported static function in the Capture Services Expression Language (see the Designer Documentation). [&lt;any text&gt;]{[&lt;Format Specification&gt;|]&lt;Expression&gt;}[&lt;any text&gt;] - Using the expression language functions can allow the user of a GUID or unique time string to be a part of the Batch Name. Example: \&quot;batchName\&quot;:\&quot;MyBatch_{Tddhhmmss|Now()}_{NextIndex}\&quot; produces on the server, MyBatch_09064934_1026000000003. Or \&quot;batchName\&quot;:\&quot;MyBatch_{S|CreateGuid(0)}\&quot; produces on the server, MyBatch_82fcd238-2fb7-44ac-9acc-a13ce406241d  **Document type and UimData values in batch:**  For composing export profile and exporting UimData values, Document type and UimData values must at batch level mentioned below with given names as below.  **Batch – Level 7:**  valueName &#x3D; \&quot;Profile \&quot;  valueType &#x3D; \&quot;string\&quot;  value &#x3D; // Name of the profile.  **Document – Level 1:**  valueName &#x3D; \&quot;UimDocumentType\&quot;  valueType &#x3D; \&quot;string\&quot;  value &#x3D; // This should be a string specifying the document type name.  valueName &#x3D; \&quot;UimData\&quot;  valueType &#x3D; \&quot;uimdata\&quot;  value &#x3D; // This should be a UIM Data JSON Object  valueName &#x3D; \&quot;OutputFile \&quot;  valueType &#x3D; \&quot; file\&quot;  value &#x3D; // File id for the original PDF to be available for export.  **Page – Level 0:**  valueName &#x3D; \&quot;OutputImage\&quot;  valueType &#x3D; \&quot;file\&quot;  value &#x3D; // file id for the image to be exported  valueName &#x3D; \&quot;Backside\&quot;  valueType &#x3D; \&quot;int\&quot;  value &#x3D; // 0 (front) or 1 (back) to indicate whether the image is a backside image.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sessionBatchesPostTest() throws ApiException {
        SessionBatchesPostRequest sessionBatchesPostRequest = null;
        String suppressResponseCodes = null;
        SessionBatchesPost201Response response = api.sessionBatchesPost(sessionBatchesPostRequest, suppressResponseCodes);
        // TODO: test validations
    }

}
