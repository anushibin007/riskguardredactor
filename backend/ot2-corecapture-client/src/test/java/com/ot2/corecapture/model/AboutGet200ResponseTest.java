/*
 * Core Capture Services
 * OpenText Core Capture Services are a set of RESTful web service interfaces that provides capture functionality. Being developed in a purely RESTful style, Core Capture Services are easier to consume for the purposes of writing custom clients.  Core Capture Services identifies resources by Uniform Resource Identifiers (URIs). It defines specific media types to represent resources and drives application state transfers by using link relations. It uses a limited number of HTTP standard methods (GET, POST, and DELETE) to manipulate these resources over the HTTP protocol.  Core Capture Services (hereafter simply called, \"service\") supports only the JSON format for resource representation. JavaScript Object Notation (JSON) is a lightweight data interchange format based on a subset of the JavaScript Programming Language standard.
 *
 * The version of the OpenAPI document: 23.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ot2.corecapture.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ot2.corecapture.model.ReturnStatusBody;
import java.io.IOException;
import java.util.Arrays;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for AboutGet200Response
 */
public class AboutGet200ResponseTest {
    private final AboutGet200Response model = new AboutGet200Response();

    /**
     * Model tests for AboutGet200Response
     */
    @Test
    public void testAboutGet200Response() {
        // TODO: test AboutGet200Response
    }

    /**
     * Test the property 'returnStatus'
     */
    @Test
    public void returnStatusTest() {
        // TODO: test returnStatus
    }

    /**
     * Test the property 'serviceName'
     */
    @Test
    public void serviceNameTest() {
        // TODO: test serviceName
    }

    /**
     * Test the property 'productName'
     */
    @Test
    public void productNameTest() {
        // TODO: test productName
    }

    /**
     * Test the property 'copyright'
     */
    @Test
    public void copyrightTest() {
        // TODO: test copyright
    }

    /**
     * Test the property 'serviceVersion'
     */
    @Test
    public void serviceVersionTest() {
        // TODO: test serviceVersion
    }

    /**
     * Test the property 'buildVersion'
     */
    @Test
    public void buildVersionTest() {
        // TODO: test buildVersion
    }

    /**
     * Test the property 'productVersion'
     */
    @Test
    public void productVersionTest() {
        // TODO: test productVersion
    }

    /**
     * Test the property 'schemaVersion'
     */
    @Test
    public void schemaVersionTest() {
        // TODO: test schemaVersion
    }

    /**
     * Test the property 'designerVersion'
     */
    @Test
    public void designerVersionTest() {
        // TODO: test designerVersion
    }

    /**
     * Test the property 'serverDate'
     */
    @Test
    public void serverDateTest() {
        // TODO: test serverDate
    }

    /**
     * Test the property 'serverId'
     */
    @Test
    public void serverIdTest() {
        // TODO: test serverId
    }

    /**
     * Test the property 'minDesignerVersion'
     */
    @Test
    public void minDesignerVersionTest() {
        // TODO: test minDesignerVersion
    }

}
