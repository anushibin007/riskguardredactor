/*
 * Core Capture Services
 * OpenText Core Capture Services are a set of RESTful web service interfaces that provides capture functionality. Being developed in a purely RESTful style, Core Capture Services are easier to consume for the purposes of writing custom clients.  Core Capture Services identifies resources by Uniform Resource Identifiers (URIs). It defines specific media types to represent resources and drives application state transfers by using link relations. It uses a limited number of HTTP standard methods (GET, POST, and DELETE) to manipulate these resources over the HTTP protocol.  Core Capture Services (hereafter simply called, \"service\") supports only the JSON format for resource representation. JavaScript Object Notation (JSON) is a lightweight data interchange format based on a subset of the JavaScript Programming Language standard.
 *
 * The version of the OpenAPI document: 23.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ot2.corecapture.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ot2.corecapture.model.DocItemContentContentFieldsInnerUiControlInfo;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for DocItemContentContentFieldsInner
 */
public class DocItemContentContentFieldsInnerTest {
    private final DocItemContentContentFieldsInner model = new DocItemContentContentFieldsInner();

    /**
     * Model tests for DocItemContentContentFieldsInner
     */
    @Test
    public void testDocItemContentContentFieldsInner() {
        // TODO: test DocItemContentContentFieldsInner
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'isArray'
     */
    @Test
    public void isArrayTest() {
        // TODO: test isArray
    }

    /**
     * Test the property 'indexFieldType'
     */
    @Test
    public void indexFieldTypeTest() {
        // TODO: test indexFieldType
    }

    /**
     * Test the property 'sectionName'
     */
    @Test
    public void sectionNameTest() {
        // TODO: test sectionName
    }

    /**
     * Test the property 'indexLevel'
     */
    @Test
    public void indexLevelTest() {
        // TODO: test indexLevel
    }

    /**
     * Test the property 'confirmKind'
     */
    @Test
    public void confirmKindTest() {
        // TODO: test confirmKind
    }

    /**
     * Test the property 'isReadOnly'
     */
    @Test
    public void isReadOnlyTest() {
        // TODO: test isReadOnly
    }

    /**
     * Test the property 'isRequried'
     */
    @Test
    public void isRequriedTest() {
        // TODO: test isRequried
    }

    /**
     * Test the property 'minValue'
     */
    @Test
    public void minValueTest() {
        // TODO: test minValue
    }

    /**
     * Test the property 'maxValue'
     */
    @Test
    public void maxValueTest() {
        // TODO: test maxValue
    }

    /**
     * Test the property 'restrictionMask'
     */
    @Test
    public void restrictionMaskTest() {
        // TODO: test restrictionMask
    }

    /**
     * Test the property 'viewFormat'
     */
    @Test
    public void viewFormatTest() {
        // TODO: test viewFormat
    }

    /**
     * Test the property 'checkDateFromNow'
     */
    @Test
    public void checkDateFromNowTest() {
        // TODO: test checkDateFromNow
    }

    /**
     * Test the property 'uiControlInfo'
     */
    @Test
    public void uiControlInfoTest() {
        // TODO: test uiControlInfo
    }

    /**
     * Test the property 'isPopulationTrigger'
     */
    @Test
    public void isPopulationTriggerTest() {
        // TODO: test isPopulationTrigger
    }

    /**
     * Test the property 'optionsPopulatedBy'
     */
    @Test
    public void optionsPopulatedByTest() {
        // TODO: test optionsPopulatedBy
    }

    /**
     * Test the property 'extractFirstValue'
     */
    @Test
    public void extractFirstValueTest() {
        // TODO: test extractFirstValue
    }

    /**
     * Test the property 'isCalculationTarget'
     */
    @Test
    public void isCalculationTargetTest() {
        // TODO: test isCalculationTarget
    }

    /**
     * Test the property 'sampleRect'
     */
    @Test
    public void sampleRectTest() {
        // TODO: test sampleRect
    }

    /**
     * Test the property 'samplePageId'
     */
    @Test
    public void samplePageIdTest() {
        // TODO: test samplePageId
    }

}
