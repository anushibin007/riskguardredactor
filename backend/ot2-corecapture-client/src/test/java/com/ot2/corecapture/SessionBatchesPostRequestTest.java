/*
 * Core Capture Services
 * OpenText Core Capture Services are a set of RESTful web service interfaces that provides capture functionality. Being developed in a purely RESTful style, Core Capture Services are easier to consume for the purposes of writing custom clients.  Core Capture Services identifies resources by Uniform Resource Identifiers (URIs). It defines specific media types to represent resources and drives application state transfers by using link relations. It uses a limited number of HTTP standard methods (GET, POST, and DELETE) to manipulate these resources over the HTTP protocol.  Core Capture Services (hereafter simply called, \"service\") supports only the JSON format for resource representation. JavaScript Object Notation (JSON) is a lightweight data interchange format based on a subset of the JavaScript Programming Language standard.
 *
 * The version of the OpenAPI document: 23.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ot2.corecapture;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ot2.corecapture.Env;
import com.ot2.corecapture.SessionBatchesPostRequestNodesInner;
import com.ot2.corecapture.SessionBatchesPostRequestValuesInner;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for SessionBatchesPostRequest
 */
public class SessionBatchesPostRequestTest {
    private final SessionBatchesPostRequest model = new SessionBatchesPostRequest();

    /**
     * Model tests for SessionBatchesPostRequest
     */
    @Test
    public void testSessionBatchesPostRequest() {
        // TODO: test SessionBatchesPostRequest
    }

    /**
     * Test the property 'env'
     */
    @Test
    public void envTest() {
        // TODO: test env
    }

    /**
     * Test the property 'captureFlow'
     */
    @Test
    public void captureFlowTest() {
        // TODO: test captureFlow
    }

    /**
     * Test the property 'batchName'
     */
    @Test
    public void batchNameTest() {
        // TODO: test batchName
    }

    /**
     * Test the property 'batchRootLevel'
     */
    @Test
    public void batchRootLevelTest() {
        // TODO: test batchRootLevel
    }

    /**
     * Test the property 'batchPriority'
     */
    @Test
    public void batchPriorityTest() {
        // TODO: test batchPriority
    }

    /**
     * Test the property 'exportType'
     */
    @Test
    public void exportTypeTest() {
        // TODO: test exportType
    }

    /**
     * Test the property 'pdfGeneration'
     */
    @Test
    public void pdfGenerationTest() {
        // TODO: test pdfGeneration
    }

    /**
     * Test the property 'ftpConnection'
     */
    @Test
    public void ftpConnectionTest() {
        // TODO: test ftpConnection
    }

    /**
     * Test the property 'autoFormatExcludeImages'
     */
    @Test
    public void autoFormatExcludeImagesTest() {
        // TODO: test autoFormatExcludeImages
    }

    /**
     * Test the property 'iAServerConnection'
     */
    @Test
    public void iAServerConnectionTest() {
        // TODO: test iAServerConnection
    }

    /**
     * Test the property 'machineId'
     */
    @Test
    public void machineIdTest() {
        // TODO: test machineId
    }

    /**
     * Test the property 'dispatch'
     */
    @Test
    public void dispatchTest() {
        // TODO: test dispatch
    }

    /**
     * Test the property 'nodes'
     */
    @Test
    public void nodesTest() {
        // TODO: test nodes
    }

    /**
     * Test the property 'values'
     */
    @Test
    public void valuesTest() {
        // TODO: test values
    }

}
