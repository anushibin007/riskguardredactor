/*
 * Core Capture Services
 * OpenText Core Capture Services are a set of RESTful web service interfaces that provides capture functionality. Being developed in a purely RESTful style, Core Capture Services are easier to consume for the purposes of writing custom clients.  Core Capture Services identifies resources by Uniform Resource Identifiers (URIs). It defines specific media types to represent resources and drives application state transfers by using link relations. It uses a limited number of HTTP standard methods (GET, POST, and DELETE) to manipulate these resources over the HTTP protocol.  Core Capture Services (hereafter simply called, \"service\") supports only the JSON format for resource representation. JavaScript Object Notation (JSON) is a lightweight data interchange format based on a subset of the JavaScript Programming Language standard.
 *
 * The version of the OpenAPI document: 23.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ot2.corecapture.api;

import com.ot2.corecapture.invoker.ApiException;
import com.ot2.corecapture.model.Get415Response;
import com.ot2.corecapture.model.SessionGet200Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SessionApi
 */
@Disabled
public class SessionApiTest {

    private final SessionApi api = new SessionApi();

    /**
     * Deletes your session data.
     *
     * As long as the session is still active, deleting your session will return HTTP status code 200. If the session has expired, then a 401 Unauthorized response is sent by the server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sessionDeleteTest() throws ApiException {
        String suppressResponseCodes = null;
        String response = api.sessionDelete(suppressResponseCodes);
        // TODO: test validations
    }

    /**
     * Retrieves the Session resource.
     *
     * The Session resource will provide the URI for ending the session. This clears all the files and metadata in your session and allows for more efficient processing for future sessions related to your subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sessionGetTest() throws ApiException {
        String suppressResponseCodes = null;
        SessionGet200Response response = api.sessionGet(suppressResponseCodes);
        // TODO: test validations
    }

}
