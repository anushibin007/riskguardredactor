/*
 * Content Storage Service API
 * Content Storage Service provides storage and indexing for content and documents, which includes encryption/decryption of the content, anti-virus and authorization checks on upload and download. It is used by Content Metadata Service (CMS) when storing document objects, CMS will provide authorization management.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ot2.contentstorageservice.api;

import com.ot2.contentstorageservice.invoker.ApiException;
import com.ot2.contentstorageservice.model.Content;
import com.ot2.contentstorageservice.model.Error;
import java.io.File;
import com.ot2.contentstorageservice.model.HttpProblem;
import com.ot2.contentstorageservice.model.UploadContentRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ContentApi
 */
@Disabled
public class ContentApiTest {

    private final ContentApi api = new ContentApi();

    /**
     * Download content
     *
     * Download content
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void downloadcontentTest() throws ApiException {
        String id = null;
        String objectId = null;
        String fileName = null;
        String mimeType = null;
        String dispositionType = null;
        Boolean avsScan = null;
        File response = api.downloadcontent(id, objectId, fileName, mimeType, dispositionType, avsScan);
        // TODO: test validations
    }

    /**
     * Get content metadata for the content
     *
     * Get details of a specific content
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContentTest() throws ApiException {
        String id = null;
        Content response = api.getContent(id);
        // TODO: test validations
    }

    /**
     * Tenant user upload content
     *
     * Tenant user upload content
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadContentTest() throws ApiException {
        UploadContentRequest uploadContentRequest = null;
        Content response = api.uploadContent(uploadContentRequest);
        // TODO: test validations
    }

    /**
     * Upload content for a tenant
     *
     * Upload content for a tenant
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadContentTenantTest() throws ApiException {
        String tenantId = null;
        Boolean avsScan = null;
        UploadContentRequest uploadContentRequest = null;
        Content response = api.uploadContentTenant(tenantId, avsScan, uploadContentRequest);
        // TODO: test validations
    }

    /**
     * Upload content with upload URL
     *
     * Upload content with upload URL
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadContentURLTest() throws ApiException {
        String id = null;
        Boolean avsScan = null;
        UploadContentRequest uploadContentRequest = null;
        Content response = api.uploadContentURL(id, avsScan, uploadContentRequest);
        // TODO: test validations
    }

}
