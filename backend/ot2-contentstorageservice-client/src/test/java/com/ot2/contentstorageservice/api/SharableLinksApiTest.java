/*
 * Content Storage Service API
 * Content Storage Service provides storage and indexing for content and documents, which includes encryption/decryption of the content, anti-virus and authorization checks on upload and download. It is used by Content Metadata Service (CMS) when storing document objects, CMS will provide authorization management.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ot2.contentstorageservice.api;

import com.ot2.contentstorageservice.invoker.ApiException;
import com.ot2.contentstorageservice.model.Error;
import com.ot2.contentstorageservice.model.HttpProblem;
import com.ot2.contentstorageservice.model.NewLinkRequest;
import com.ot2.contentstorageservice.model.NewLinkResponse;
import com.ot2.contentstorageservice.model.UpdateLinkRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SharableLinksApi
 */
@Disabled
public class SharableLinksApiTest {

    private final SharableLinksApi api = new SharableLinksApi();

    /**
     * Create a new sharable-link for download
     *
     * Create a new sharable-link for download
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSharableLinkTest() throws ApiException {
        String id = null;
        String objectId = null;
        NewLinkRequest newLinkRequest = null;
        NewLinkResponse response = api.createSharableLink(id, objectId, newLinkRequest);
        // TODO: test validations
    }

    /**
     * Delete a sharable link
     *
     * Delete a sharable link
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSharableLinkTest() throws ApiException {
        String id = null;
        String urlId = null;
        api.deleteSharableLink(id, urlId);
        // TODO: test validations
    }

    /**
     * Retrieve sharable link object
     *
     * Retrieve sharable link object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSharableLinkTest() throws ApiException {
        String id = null;
        String urlId = null;
        NewLinkResponse response = api.getSharableLink(id, urlId);
        // TODO: test validations
    }

    /**
     * Update a sharable link
     *
     * Update a sharable link
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSharableLinkTest() throws ApiException {
        String id = null;
        String urlId = null;
        UpdateLinkRequest updateLinkRequest = null;
        NewLinkResponse response = api.updateSharableLink(id, urlId, updateLinkRequest);
        // TODO: test validations
    }

}
