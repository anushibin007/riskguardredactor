/*
 * Content Storage Service API
 * Content Storage Service provides storage and indexing for content and documents, which includes encryption/decryption of the content, anti-virus and authorization checks on upload and download. It is used by Content Metadata Service (CMS) when storing document objects, CMS will provide authorization management.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ot2.contentstorageservice.api;

import com.ot2.contentstorageservice.invoker.ApiCallback;
import com.ot2.contentstorageservice.invoker.ApiClient;
import com.ot2.contentstorageservice.invoker.ApiException;
import com.ot2.contentstorageservice.invoker.ApiResponse;
import com.ot2.contentstorageservice.invoker.Configuration;
import com.ot2.contentstorageservice.invoker.Pair;
import com.ot2.contentstorageservice.invoker.ProgressRequestBody;
import com.ot2.contentstorageservice.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ot2.contentstorageservice.model.Error;
import com.ot2.contentstorageservice.model.HttpProblem;
import com.ot2.contentstorageservice.model.NewLinkRequest;
import com.ot2.contentstorageservice.model.NewLinkResponse;
import com.ot2.contentstorageservice.model.UpdateLinkRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SharableLinksApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SharableLinksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SharableLinksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createSharableLink
     * @param id ID of upload (required)
     * @param objectId The ID of the object attached with the content (optional)
     * @param newLinkRequest Password and expiry (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Download URL </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The endpoint cannot be reached because the request is not authorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Request failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSharableLinkCall(String id, String objectId, NewLinkRequest newLinkRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = newLinkRequest;

        // create path and map variables
        String localVarPath = "/v2/content/{id}/publicShareUrl"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (objectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object-id", objectId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "tenant" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSharableLinkValidateBeforeCall(String id, String objectId, NewLinkRequest newLinkRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createSharableLink(Async)");
        }

        return createSharableLinkCall(id, objectId, newLinkRequest, _callback);

    }

    /**
     * Create a new sharable-link for download
     * Create a new sharable-link for download
     * @param id ID of upload (required)
     * @param objectId The ID of the object attached with the content (optional)
     * @param newLinkRequest Password and expiry (optional)
     * @return NewLinkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Download URL </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The endpoint cannot be reached because the request is not authorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Request failed </td><td>  -  </td></tr>
     </table>
     */
    public NewLinkResponse createSharableLink(String id, String objectId, NewLinkRequest newLinkRequest) throws ApiException {
        ApiResponse<NewLinkResponse> localVarResp = createSharableLinkWithHttpInfo(id, objectId, newLinkRequest);
        return localVarResp.getData();
    }

    /**
     * Create a new sharable-link for download
     * Create a new sharable-link for download
     * @param id ID of upload (required)
     * @param objectId The ID of the object attached with the content (optional)
     * @param newLinkRequest Password and expiry (optional)
     * @return ApiResponse&lt;NewLinkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Download URL </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The endpoint cannot be reached because the request is not authorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Request failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NewLinkResponse> createSharableLinkWithHttpInfo(String id, String objectId, NewLinkRequest newLinkRequest) throws ApiException {
        okhttp3.Call localVarCall = createSharableLinkValidateBeforeCall(id, objectId, newLinkRequest, null);
        Type localVarReturnType = new TypeToken<NewLinkResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new sharable-link for download (asynchronously)
     * Create a new sharable-link for download
     * @param id ID of upload (required)
     * @param objectId The ID of the object attached with the content (optional)
     * @param newLinkRequest Password and expiry (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Download URL </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The endpoint cannot be reached because the request is not authorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Request failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSharableLinkAsync(String id, String objectId, NewLinkRequest newLinkRequest, final ApiCallback<NewLinkResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSharableLinkValidateBeforeCall(id, objectId, newLinkRequest, _callback);
        Type localVarReturnType = new TypeToken<NewLinkResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSharableLink
     * @param id ID of upload (required)
     * @param urlId ID of download url (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deletion successfully, No content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The endpoint cannot be reached because the request is not authorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Request failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSharableLinkCall(String id, String urlId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/content/{id}/publicShareUrl/{urlId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "urlId" + "}", localVarApiClient.escapeString(urlId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "tenant" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSharableLinkValidateBeforeCall(String id, String urlId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteSharableLink(Async)");
        }

        // verify the required parameter 'urlId' is set
        if (urlId == null) {
            throw new ApiException("Missing the required parameter 'urlId' when calling deleteSharableLink(Async)");
        }

        return deleteSharableLinkCall(id, urlId, _callback);

    }

    /**
     * Delete a sharable link
     * Delete a sharable link
     * @param id ID of upload (required)
     * @param urlId ID of download url (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deletion successfully, No content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The endpoint cannot be reached because the request is not authorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Request failed </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSharableLink(String id, String urlId) throws ApiException {
        deleteSharableLinkWithHttpInfo(id, urlId);
    }

    /**
     * Delete a sharable link
     * Delete a sharable link
     * @param id ID of upload (required)
     * @param urlId ID of download url (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deletion successfully, No content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The endpoint cannot be reached because the request is not authorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Request failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSharableLinkWithHttpInfo(String id, String urlId) throws ApiException {
        okhttp3.Call localVarCall = deleteSharableLinkValidateBeforeCall(id, urlId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a sharable link (asynchronously)
     * Delete a sharable link
     * @param id ID of upload (required)
     * @param urlId ID of download url (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deletion successfully, No content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The endpoint cannot be reached because the request is not authorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Request failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSharableLinkAsync(String id, String urlId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSharableLinkValidateBeforeCall(id, urlId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSharableLink
     * @param id ID of upload (required)
     * @param urlId ID of download url (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The endpoint cannot be reached because the request is not authorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Request failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSharableLinkCall(String id, String urlId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/content/{id}/publicShareUrl/{urlId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "urlId" + "}", localVarApiClient.escapeString(urlId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "tenant" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSharableLinkValidateBeforeCall(String id, String urlId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSharableLink(Async)");
        }

        // verify the required parameter 'urlId' is set
        if (urlId == null) {
            throw new ApiException("Missing the required parameter 'urlId' when calling getSharableLink(Async)");
        }

        return getSharableLinkCall(id, urlId, _callback);

    }

    /**
     * Retrieve sharable link object
     * Retrieve sharable link object
     * @param id ID of upload (required)
     * @param urlId ID of download url (required)
     * @return NewLinkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The endpoint cannot be reached because the request is not authorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Request failed </td><td>  -  </td></tr>
     </table>
     */
    public NewLinkResponse getSharableLink(String id, String urlId) throws ApiException {
        ApiResponse<NewLinkResponse> localVarResp = getSharableLinkWithHttpInfo(id, urlId);
        return localVarResp.getData();
    }

    /**
     * Retrieve sharable link object
     * Retrieve sharable link object
     * @param id ID of upload (required)
     * @param urlId ID of download url (required)
     * @return ApiResponse&lt;NewLinkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The endpoint cannot be reached because the request is not authorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Request failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NewLinkResponse> getSharableLinkWithHttpInfo(String id, String urlId) throws ApiException {
        okhttp3.Call localVarCall = getSharableLinkValidateBeforeCall(id, urlId, null);
        Type localVarReturnType = new TypeToken<NewLinkResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve sharable link object (asynchronously)
     * Retrieve sharable link object
     * @param id ID of upload (required)
     * @param urlId ID of download url (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The endpoint cannot be reached because the request is not authorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Request failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSharableLinkAsync(String id, String urlId, final ApiCallback<NewLinkResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSharableLinkValidateBeforeCall(id, urlId, _callback);
        Type localVarReturnType = new TypeToken<NewLinkResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSharableLink
     * @param id ID of upload (required)
     * @param urlId ID of download url (required)
     * @param updateLinkRequest Expiry (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The endpoint cannot be reached because the request is not authorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Request failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSharableLinkCall(String id, String urlId, UpdateLinkRequest updateLinkRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateLinkRequest;

        // create path and map variables
        String localVarPath = "/v2/content/{id}/publicShareUrl/{urlId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "urlId" + "}", localVarApiClient.escapeString(urlId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "tenant" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSharableLinkValidateBeforeCall(String id, String urlId, UpdateLinkRequest updateLinkRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateSharableLink(Async)");
        }

        // verify the required parameter 'urlId' is set
        if (urlId == null) {
            throw new ApiException("Missing the required parameter 'urlId' when calling updateSharableLink(Async)");
        }

        return updateSharableLinkCall(id, urlId, updateLinkRequest, _callback);

    }

    /**
     * Update a sharable link
     * Update a sharable link
     * @param id ID of upload (required)
     * @param urlId ID of download url (required)
     * @param updateLinkRequest Expiry (optional)
     * @return NewLinkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The endpoint cannot be reached because the request is not authorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Request failed </td><td>  -  </td></tr>
     </table>
     */
    public NewLinkResponse updateSharableLink(String id, String urlId, UpdateLinkRequest updateLinkRequest) throws ApiException {
        ApiResponse<NewLinkResponse> localVarResp = updateSharableLinkWithHttpInfo(id, urlId, updateLinkRequest);
        return localVarResp.getData();
    }

    /**
     * Update a sharable link
     * Update a sharable link
     * @param id ID of upload (required)
     * @param urlId ID of download url (required)
     * @param updateLinkRequest Expiry (optional)
     * @return ApiResponse&lt;NewLinkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The endpoint cannot be reached because the request is not authorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Request failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NewLinkResponse> updateSharableLinkWithHttpInfo(String id, String urlId, UpdateLinkRequest updateLinkRequest) throws ApiException {
        okhttp3.Call localVarCall = updateSharableLinkValidateBeforeCall(id, urlId, updateLinkRequest, null);
        Type localVarReturnType = new TypeToken<NewLinkResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a sharable link (asynchronously)
     * Update a sharable link
     * @param id ID of upload (required)
     * @param urlId ID of download url (required)
     * @param updateLinkRequest Expiry (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The endpoint cannot be reached because the request is not authorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Request failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSharableLinkAsync(String id, String urlId, UpdateLinkRequest updateLinkRequest, final ApiCallback<NewLinkResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSharableLinkValidateBeforeCall(id, urlId, updateLinkRequest, _callback);
        Type localVarReturnType = new TypeToken<NewLinkResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
