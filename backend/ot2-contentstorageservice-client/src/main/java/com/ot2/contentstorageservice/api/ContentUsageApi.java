/*
 * Content Storage Service API
 * Content Storage Service provides storage and indexing for content and documents, which includes encryption/decryption of the content, anti-virus and authorization checks on upload and download. It is used by Content Metadata Service (CMS) when storing document objects, CMS will provide authorization management.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ot2.contentstorageservice.api;

import com.ot2.contentstorageservice.invoker.ApiCallback;
import com.ot2.contentstorageservice.invoker.ApiClient;
import com.ot2.contentstorageservice.invoker.ApiException;
import com.ot2.contentstorageservice.invoker.ApiResponse;
import com.ot2.contentstorageservice.invoker.Configuration;
import com.ot2.contentstorageservice.invoker.Pair;
import com.ot2.contentstorageservice.invoker.ProgressRequestBody;
import com.ot2.contentstorageservice.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ot2.contentstorageservice.model.Error;
import com.ot2.contentstorageservice.model.HttpProblem;
import com.ot2.contentstorageservice.model.TenantUsageResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ContentUsageApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ContentUsageApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ContentUsageApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for usageContentTenant
     * @param tenantId ID of tenant (required)
     * @param units Units to use for storage display (possible values are B, KB, MB, GB, TB, default is MB) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Usage statistics retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The endpoint cannot be reached because the request is not authorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Request failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usageContentTenantCall(String tenantId, String units, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/tenant/{tenantId}/usage"
            .replace("{" + "tenantId" + "}", localVarApiClient.escapeString(tenantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (units != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("units", units));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "tenant" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usageContentTenantValidateBeforeCall(String tenantId, String units, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling usageContentTenant(Async)");
        }

        return usageContentTenantCall(tenantId, units, _callback);

    }

    /**
     * Get total storage used by a tenant
     * Get total storage used by a tenant
     * @param tenantId ID of tenant (required)
     * @param units Units to use for storage display (possible values are B, KB, MB, GB, TB, default is MB) (optional)
     * @return TenantUsageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Usage statistics retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The endpoint cannot be reached because the request is not authorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Request failed </td><td>  -  </td></tr>
     </table>
     */
    public TenantUsageResponse usageContentTenant(String tenantId, String units) throws ApiException {
        ApiResponse<TenantUsageResponse> localVarResp = usageContentTenantWithHttpInfo(tenantId, units);
        return localVarResp.getData();
    }

    /**
     * Get total storage used by a tenant
     * Get total storage used by a tenant
     * @param tenantId ID of tenant (required)
     * @param units Units to use for storage display (possible values are B, KB, MB, GB, TB, default is MB) (optional)
     * @return ApiResponse&lt;TenantUsageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Usage statistics retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The endpoint cannot be reached because the request is not authorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Request failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TenantUsageResponse> usageContentTenantWithHttpInfo(String tenantId, String units) throws ApiException {
        okhttp3.Call localVarCall = usageContentTenantValidateBeforeCall(tenantId, units, null);
        Type localVarReturnType = new TypeToken<TenantUsageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get total storage used by a tenant (asynchronously)
     * Get total storage used by a tenant
     * @param tenantId ID of tenant (required)
     * @param units Units to use for storage display (possible values are B, KB, MB, GB, TB, default is MB) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Usage statistics retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The endpoint cannot be reached because the request is not authorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Request failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usageContentTenantAsync(String tenantId, String units, final ApiCallback<TenantUsageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = usageContentTenantValidateBeforeCall(tenantId, units, _callback);
        Type localVarReturnType = new TypeToken<TenantUsageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
