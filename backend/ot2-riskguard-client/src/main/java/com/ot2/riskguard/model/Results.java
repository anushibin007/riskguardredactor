/*
 * Magellan Risk Guard
 * The Magellan Risk Guard REST service processes documents to help identify risks/threats. It is a completely stateless service that offers built-in accurate models. Leveraging the core components of Magellan Text Mining, the following information will be identified/extracted from documents  :  - PII(Personally Identifiable Information)  - Personal Secure Information (PSI)  - Hate Speech Classification  - Classification of images for threat/risk detection.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ot2.riskguard.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ot2.riskguard.model.Result;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ot2.riskguard.invoker.JSON;

/**
 * Results
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-10-14T00:05:56.640873400+05:30[Asia/Calcutta]")
public class Results {
  public static final String SERIALIZED_NAME_TME = "tme";
  @SerializedName(SERIALIZED_NAME_TME)
  private Result tme;

  public static final String SERIALIZED_NAME_IA = "ia";
  @SerializedName(SERIALIZED_NAME_IA)
  private Result ia;

  public static final String SERIALIZED_NAME_VA = "va";
  @SerializedName(SERIALIZED_NAME_VA)
  private Result va;

  public static final String SERIALIZED_NAME_STT = "stt";
  @SerializedName(SERIALIZED_NAME_STT)
  private Result stt;

  public Results() {
  }

  public Results tme(Result tme) {
    
    this.tme = tme;
    return this;
  }

   /**
   * Get tme
   * @return tme
  **/
  @javax.annotation.Nullable
  public Result getTme() {
    return tme;
  }


  public void setTme(Result tme) {
    this.tme = tme;
  }


  public Results ia(Result ia) {
    
    this.ia = ia;
    return this;
  }

   /**
   * Get ia
   * @return ia
  **/
  @javax.annotation.Nullable
  public Result getIa() {
    return ia;
  }


  public void setIa(Result ia) {
    this.ia = ia;
  }


  public Results va(Result va) {
    
    this.va = va;
    return this;
  }

   /**
   * Get va
   * @return va
  **/
  @javax.annotation.Nullable
  public Result getVa() {
    return va;
  }


  public void setVa(Result va) {
    this.va = va;
  }


  public Results stt(Result stt) {
    
    this.stt = stt;
    return this;
  }

   /**
   * Get stt
   * @return stt
  **/
  @javax.annotation.Nullable
  public Result getStt() {
    return stt;
  }


  public void setStt(Result stt) {
    this.stt = stt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Results results = (Results) o;
    return Objects.equals(this.tme, results.tme) &&
        Objects.equals(this.ia, results.ia) &&
        Objects.equals(this.va, results.va) &&
        Objects.equals(this.stt, results.stt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tme, ia, va, stt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Results {\n");
    sb.append("    tme: ").append(toIndentedString(tme)).append("\n");
    sb.append("    ia: ").append(toIndentedString(ia)).append("\n");
    sb.append("    va: ").append(toIndentedString(va)).append("\n");
    sb.append("    stt: ").append(toIndentedString(stt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tme");
    openapiFields.add("ia");
    openapiFields.add("va");
    openapiFields.add("stt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Results
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Results.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Results is not found in the empty JSON string", Results.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Results.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Results` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `tme`
      if (jsonObj.get("tme") != null && !jsonObj.get("tme").isJsonNull()) {
        Result.validateJsonElement(jsonObj.get("tme"));
      }
      // validate the optional field `ia`
      if (jsonObj.get("ia") != null && !jsonObj.get("ia").isJsonNull()) {
        Result.validateJsonElement(jsonObj.get("ia"));
      }
      // validate the optional field `va`
      if (jsonObj.get("va") != null && !jsonObj.get("va").isJsonNull()) {
        Result.validateJsonElement(jsonObj.get("va"));
      }
      // validate the optional field `stt`
      if (jsonObj.get("stt") != null && !jsonObj.get("stt").isJsonNull()) {
        Result.validateJsonElement(jsonObj.get("stt"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Results.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Results' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Results> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Results.class));

       return (TypeAdapter<T>) new TypeAdapter<Results>() {
           @Override
           public void write(JsonWriter out, Results value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Results read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Results given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Results
  * @throws IOException if the JSON string is invalid with respect to Results
  */
  public static Results fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Results.class);
  }

 /**
  * Convert an instance of Results to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

