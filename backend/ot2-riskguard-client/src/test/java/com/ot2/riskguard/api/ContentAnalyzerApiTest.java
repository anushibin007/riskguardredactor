/*
 * Magellan Risk Guard
 * The Magellan Risk Guard REST service processes documents to help identify risks/threats. It is a completely stateless service that offers built-in accurate models. Leveraging the core components of Magellan Text Mining, the following information will be identified/extracted from documents  :  - PII(Personally Identifiable Information)  - Personal Secure Information (PSI)  - Hate Speech Classification  - Classification of images for threat/risk detection.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ot2.riskguard.api;

import com.ot2.riskguard.invoker.ApiException;
import com.ot2.riskguard.model.ContentResponse;
import java.io.File;
import com.ot2.riskguard.model.OT2ErrorMessage;
import com.ot2.riskguard.model.ProductVersion;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ContentAnalyzerApi
 */
@Disabled
public class ContentAnalyzerApiTest {

    private final ContentAnalyzerApi api = new ContentAnalyzerApi();

    /**
     * Get version of Risk Guard Service
     *
     * Get version of Risk Guard Service. This information includes service major and minor version details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProductVersionTest() throws ApiException {
        ProductVersion response = api.getProductVersion();
        // TODO: test validations
    }

    /**
     * Process documents/images for extraction/identification of PII, PSI and threat/risk
     *
     * This is the main end point of the service.  This takes the binary document with multi-part form data.  The parameter name should be &#39;File&#39; and the binary content should be attached to it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void processContentTest() throws ApiException {
        File _file = null;
        ContentResponse response = api.processContent(_file);
        // TODO: test validations
    }

}
